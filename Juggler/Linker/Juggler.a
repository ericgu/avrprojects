;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.5b Standard
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/24/2010
;Author  : Eric
;Company :
;Comments:
;
;
;Chip type               : ATmega8515L
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega8515.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000004 VOL: 0
	#endif
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;
;#define FRAME0 0
;#define FRAME1 1
;#define FRAME2 2
;#define FRAME3 3
;#define FRAME4 4
;#define FRAME5 5
;#define FRAME6 6
;#define FRAME7 7
;#define SNOWBOTTOM 8
;#define SNOWMIDDLE 9
;#define SNOWTOP 10
;#define HAT 11
;#define EYELEFT 12
;#define EYERIGHT 13
;#define NOSE 14
;#define MOUTH 15
;
;char g_waitCount;          // number of cycles to stay with this state
;
;char g_nextValue[16];       // next state of the lights
;char g_nextWaitCount;      // count for the next state
;
;#define GetChannelValue(i) ((g_nextValue[i] != 0) ? 1 : 0)
;
;int value = 0;
;
;void CopyToOutput(void)
; 0000 0035 {

	.CSEG
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
; 0000 0036     PORTA.0 = GetChannelValue(0);
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0037     PORTA.1 = GetChannelValue(1);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0038     PORTA.2 = GetChannelValue(2);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0039     PORTA.3 = GetChannelValue(3);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003A     PORTA.4 = GetChannelValue(4);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003B     PORTA.5 = GetChannelValue(5);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 003C     PORTA.6 = GetChannelValue(6);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 003D     PORTA.7 = GetChannelValue(7);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 003E 
; 0000 003F     PORTC.0 = GetChannelValue(8);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0040     PORTC.1 = GetChannelValue(9);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0041     PORTC.2 = GetChannelValue(10);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0042     PORTC.3 = GetChannelValue(11);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0043     PORTC.4 = GetChannelValue(12);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0044     PORTC.5 = GetChannelValue(13);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0045     PORTC.6 = GetChannelValue(14);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0046     PORTC.7 = GetChannelValue(15);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0047 }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;// This runs at approximately 60 Hz
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 004D {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 004E     // Reinitialize Timer 0 value
; 0000 004F     TCNT0=0x7D;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0050 
; 0000 0051     // if the wait is over, we copy the new values over and reset the wait count.
; 0000 0052     if (g_waitCount == 0)
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0053     {
; 0000 0054         CopyToOutput();
;PCODE: $00000140 VOL: 0
; 0000 0055 
; 0000 0056             // Get the wait count. The main thread is waiting for g_nextWaitCount to be set to zero, so
; 0000 0057             // clearing it here will unblock the thread to figure out the next step in the animation...
; 0000 0058         g_waitCount = g_nextWaitCount;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0059         g_nextWaitCount = 0;
;PCODE: $00000143 VOL: 0
; 0000 005A     }
; 0000 005B     else
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 005C     {
; 0000 005D         g_waitCount--;
;PCODE: $00000146 VOL: 0
; 0000 005E     }
;PCODE: $00000147 VOL: 0
; 0000 005F }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;
;void SpinWait()
; 0000 0062 {
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0063     while (g_nextWaitCount != 0)
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0064     {
; 0000 0065     }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0066 }
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;
;void SpinWaitClearAndPause(char pauseCount)
; 0000 0069 {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 006A     char i;
; 0000 006B 
; 0000 006C     SpinWait();
;PCODE: $00000156 VOL: 0
;	pauseCount -> Y+1
;	i -> R17
;PCODE: $00000157 VOL: 0
; 0000 006D     for (i = 0; i < 15; i++)
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 006E     {
; 0000 006F         g_nextValue[i] = 0;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0070     }
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0071     g_nextWaitCount = pauseCount;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0072 }
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;
;
;void init(void);
;
;// Declare your global variables here
;
;
;void Juggle(char wait)
; 0000 007B {
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 007C     int iteration = 0;
; 0000 007D     int current = 7;
; 0000 007E 
; 0000 007F     while (iteration < 80)
;PCODE: $00000174 VOL: 0
;	wait -> Y+4
;	iteration -> R16,R17
;	current -> R18,R19
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0080     {
; 0000 0081         SpinWait();
;PCODE: $0000017D VOL: 0
; 0000 0082         g_nextValue[current] = 0;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0083         current = (current + 1) % 8;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0084         g_nextValue[current] = 1;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0085         g_nextWaitCount = wait;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0086 
; 0000 0087         iteration++;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0088     }
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0089 
; 0000 008A     SpinWaitClearAndPause(wait);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 008B }
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;
;void Sequence()
; 0000 008E {
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 008F     int last = 15;
; 0000 0090     int i;
; 0000 0091     g_nextValue[15] = 1;
;PCODE: $0000019A VOL: 0
;	last -> R16,R17
;	i -> R18,R19
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0092 
; 0000 0093     for (i = 0; i < 16; i++)
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0094     {
; 0000 0095         g_nextValue[last] = 0;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0096         g_nextValue[i] = 1;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0097 
; 0000 0098         last = (last + 1) % 16;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0099         g_nextWaitCount = 30;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 009A         SpinWait();
;PCODE: $000001B8 VOL: 0
; 0000 009B     }
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 009C 
; 0000 009D     SpinWaitClearAndPause(30);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 009E }
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;
;
;void main(void)
; 0000 00A2 {
;PCODE: $000001C5 VOL: 0
; 0000 00A3 int i = 0;
; 0000 00A4 long int j = 0;
; 0000 00A5 // Declare your local variables here
; 0000 00A6 
; 0000 00A7 init();
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;	i -> R16,R17
;	j -> Y+0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00A8 
; 0000 00A9 
; 0000 00AA // Global enable interrupts
; 0000 00AB #asm("sei")
;PCODE: $000001D2 VOL: 0
	sei
;PCODE: $000001D3 VOL: 0
; 0000 00AC 
; 0000 00AD while (1)
;PCODE: $000001D4 VOL: 0
; 0000 00AE       {
; 0000 00AF         Sequence();
;PCODE: $000001D5 VOL: 0
; 0000 00B0         //Juggle(10);
; 0000 00B1       };
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00B2 
; 0000 00B3 
; 0000 00B4 }
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;
;void init(void)
; 0000 00B7 {
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00B8 // Input/Output Ports initialization
; 0000 00B9 // Port A initialization
; 0000 00BA // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00BB // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00BC PORTA=0x00;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00BD DDRA=0xFF;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00BE 
; 0000 00BF // Port B initialization
; 0000 00C0 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C1 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C2 PORTB=0x00;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00C3 DDRB=0x00;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00C4 
; 0000 00C5 // Port C initialization
; 0000 00C6 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00C7 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00C8 PORTC=0x00;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00C9 DDRC=0xFF;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 00CA 
; 0000 00CB // Port D initialization
; 0000 00CC // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00CD // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00CE PORTD=0x00;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00CF DDRD=0x00;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00D0 
; 0000 00D1 // Port E initialization
; 0000 00D2 // Func2=In Func1=In Func0=In
; 0000 00D3 // State2=T State1=T State0=T
; 0000 00D4 PORTE=0x00;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00D5 DDRE=0x00;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00D6 
; 0000 00D7 // Timer/Counter 0 initialization
; 0000 00D8 // Clock source: System Clock
; 0000 00D9 // Clock value: 7.813 kHz
; 0000 00DA // Mode: Normal top=FFh
; 0000 00DB // OC0 output: Disconnected
; 0000 00DC TCCR0=0x05;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00DD TCNT0=0x7D;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00DE OCR0=0x00;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00DF 
; 0000 00E0 // Timer/Counter 1 initialization
; 0000 00E1 // Clock source: System Clock
; 0000 00E2 // Clock value: Timer1 Stopped
; 0000 00E3 // Mode: Normal top=FFFFh
; 0000 00E4 // OC1A output: Discon.
; 0000 00E5 // OC1B output: Discon.
; 0000 00E6 // Noise Canceler: Off
; 0000 00E7 // Input Capture on Falling Edge
; 0000 00E8 // Timer1 Overflow Interrupt: Off
; 0000 00E9 // Input Capture Interrupt: Off
; 0000 00EA // Compare A Match Interrupt: Off
; 0000 00EB // Compare B Match Interrupt: Off
; 0000 00EC TCCR1A=0x00;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 00ED TCCR1B=0x00;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00EE TCNT1H=0x00;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00EF TCNT1L=0x00;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 00F0 ICR1H=0x00;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00F1 ICR1L=0x00;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 00F2 OCR1AH=0x00;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 00F3 OCR1AL=0x00;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 00F4 OCR1BH=0x00;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 00F5 OCR1BL=0x00;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00F6 
; 0000 00F7 // External Interrupt(s) initialization
; 0000 00F8 // INT0: Off
; 0000 00F9 // INT1: Off
; 0000 00FA // INT2: Off
; 0000 00FB MCUCR=0x00;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 00FC EMCUCR=0x00;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 00FD 
; 0000 00FE // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00FF TIMSK=0x02;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0100 
; 0000 0101 // Analog Comparator initialization
; 0000 0102 // Analog Comparator: Off
; 0000 0103 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0104 ACSR=0x80;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0105 }
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
