;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include "project.h"
;
;//#define RXB8 1
;//#define TXB8 0
;//#define UPE 2
;#define OVR 3
;//#define FE 4
;//#define UDRE 5
;//#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;
;char command;
;char command_ready = 0;
;
;
;char state = 0;
;
;// Receive EG0 (off) or EG1 (on) commands from the base station...
;
;void HandleChar(char c)
; 0002 0028 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0002 0029     putchar(c);
;	c -> Y+0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 002A     switch (state)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0002 002B     {
; 0002 002C         case 0: // ready;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 002D             if (c == 'O') state = 1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 002E             if (c == 'E') state = 3;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0002 002F             break;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 0030 
; 0002 0031         case 1: // "O"
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 0032             if (c == 'K') state = 2;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0002 0033             else state = 0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 0034             break;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 0035 
; 0002 0036         case 2: // "OK"
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 0037             if (c == '\r')
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 0038             {
; 0002 0039                 command = COMMAND_OK;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0002 003A                 command_ready = 1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0002 003B                 state = 0;
;PCODE: $00000037 VOL: 0
; 0002 003C             }
; 0002 003D             else state = 0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0002 003E             break;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 003F 
; 0002 0040         case 3: // "E"
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0002 0041             if (c == 'G') state = 4;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 0042             else state = 0;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0002 0043             break;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 0044 
; 0002 0045 
; 0002 0046         case 4: // 'EG'
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0002 0047             if (c == '1')
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 0048             {
; 0002 0049                 SetLightState(1);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 004A                 LinkDetected();
;PCODE: $00000053 VOL: 0
; 0002 004B             }
; 0002 004C             else if (c == '0')
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 004D             {
; 0002 004E                 SetLightState(0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 004F                 LinkDetected();
;PCODE: $0000005C VOL: 0
; 0002 0050             }
; 0002 0051             state = 0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0002 0052             break;
;PCODE: $00000060 VOL: 0
; 0002 0053     }
;PCODE: $00000061 VOL: 0
; 0002 0054 }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0002 005B {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 005C char status,data;
; 0002 005D status=UCSRA;
;PCODE: $00000067 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 005E data=UDR;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0002 005F    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 0060    {
; 0002 0061    rx_buffer[rx_wr_index]=data;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0002 0062    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0002 0063    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0002 0064       {
; 0002 0065       rx_counter=0;
;PCODE: $0000007C VOL: 0
; 0002 0066       rx_buffer_overflow=1;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0002 0067       };
;PCODE: $0000007F VOL: 0
; 0002 0068 
; 0002 0069       HandleChar(data);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 006A 
; 0002 006B    };
;PCODE: $00000082 VOL: 0
; 0002 006C }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0002 0073 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0074 char data;
; 0002 0075 while (rx_counter==0);
;PCODE: $00000089 VOL: 0
;	data -> R17
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0002 0076 data=rx_buffer[rx_rd_index];
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0002 0077 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0002 0078 #asm("cli")
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
	cli
;PCODE: $00000099 VOL: 0
; 0002 0079 --rx_counter;
;PCODE: $0000009A VOL: 0
; 0002 007A #asm("sei")
;PCODE: $0000009B VOL: 0
	sei
;PCODE: $0000009C VOL: 0
; 0002 007B return data;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0002 007C }
;PCODE: $000000A0 VOL: 0
;#pragma used-
;#endif
