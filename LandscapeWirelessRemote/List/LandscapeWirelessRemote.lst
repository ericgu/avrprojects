
AVRASM ver. 2.1.30  D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm Mon Feb 01 20:03:00 2010

D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm(955): warning: Register r3 already defined by the .DEF directive
D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm(956): warning: Register r2 already defined by the .DEF directive
D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm(957): warning: Register r5 already defined by the .DEF directive
D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm(958): warning: Register r4 already defined by the .DEF directive
D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm(959): warning: Register r7 already defined by the .DEF directive
D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm(960): warning: Register r6 already defined by the .DEF directive
D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm(961): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.5b Standard
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATtiny2313V
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Tiny
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 32 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313V
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R3
                 	.DEF _rx_rd_index=R2
                 	.DEF _rx_counter=R5
                 	.DEF _state=R4
                 	.DEF _currentLightState=R7
                 	.DEF _linkDetectedTimeout=R6
                 	.DEF _buttonPressed=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 c028      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c106      	RJMP _timer1_ovf_isr
000006 cff9      	RJMP 0x00
000007 c0d3      	RJMP _usart_rx_isr
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G100:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x40021:
D:\AvrProjects\LandscapeWirelessRemote\List\LandscapeWirelessRemote.asm(994): warning: .cseg .db misalignment - padding zero byte
00001c 0000      	.DB  0x0
                 _0x60020:
00001d 0000
00001e 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x60000:
00001f 3053
000020 5300
000021 0031      	.DB  0x53,0x30,0x0,0x53,0x31,0x0
                 
                 __GLOBAL_INI_TBL:
000022 0001      	.DW  0x01
000023 0004      	.DW  0x04
000024 0038      	.DW  _0x40021*2
                 
000025 0004      	.DW  0x04
000026 0006      	.DW  0x06
000027 003a      	.DW  _0x60020*2
                 
                 _0xFFFFFFFF:
000028 0000      	.DW  0
                 
                 __RESET:
000029 94f8      	CLI
00002a 27ee      	CLR  R30
00002b bbec      	OUT  EECR,R30
00002c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002d e1f8      	LDI  R31,0x18
00002e b7a4      	IN   R26,MCUSR
00002f 7fa7      	CBR  R26,8
000030 bfa4      	OUT  MCUSR,R26
000031 bdf1      	OUT  WDTCR,R31
000032 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000033 e08d      	LDI  R24,(14-2)+1
000034 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000035 93ed      	ST   X+,R30
000036 958a      	DEC  R24
000037 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000038 e880      	LDI  R24,LOW(0x80)
000039 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003d e4e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003f 9185      	LPM  R24,Z+
000040 9195      	LPM  R25,Z+
000041 9700      	SBIW R24,0
000042 f061      	BREQ __GLOBAL_INI_END
000043 91a5      	LPM  R26,Z+
000044 91b5      	LPM  R27,Z+
000045 9005      	LPM  R0,Z+
000046 9015      	LPM  R1,Z+
000047 01bf      	MOVW R22,R30
000048 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000049 9005      	LPM  R0,Z+
00004a 920d      	ST   X+,R0
00004b 9701      	SBIW R24,1
00004c f7e1      	BRNE __GLOBAL_INI_LOOP
00004d 01fb      	MOVW R30,R22
00004e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00004f e0e0      	LDI  R30,0x00
000050 bbe3      	OUT  GPIOR0,R30
000051 bbe4      	OUT  GPIOR1,R30
000052 bbe5      	OUT  GPIOR2,R30
                 
                 ;STACK POINTER INITIALIZATION
000053 edef      	LDI  R30,LOW(0xDF)
000054 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 e8c0      	LDI  R28,LOW(0x80)
                 
000056 c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include "project.h"
                 ;
                 ;void main(void)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0008     init();
000057 d007      	RCALL _init
                 ; 0000 0009 
                 ; 0000 000A     while (1)
                 _0x3:
                 ; 0000 000B     {
                 ; 0000 000C         delay_ms(1000);
000058 eee8      	LDI  R30,LOW(1000)
000059 e0f3      	LDI  R31,HIGH(1000)
00005a 93fa      	ST   -Y,R31
00005b 93ea      	ST   -Y,R30
00005c d10a      	RCALL _delay_ms
                 ; 0000 000D     }
00005d cffa      	RJMP _0x3
                 ; 0000 000E }
                 _0x6:
00005e cfff      	RJMP _0x6
                 ;
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void init(void)
                 ; 0001 0004 {
                 
                 	.CSEG
                 _init:
                 ; 0001 0005 // Crystal Oscillator division factor: 1
                 ; 0001 0006 #pragma optsize-
                 ; 0001 0007 CLKPR=0x80;
00005f e8e0      	LDI  R30,LOW(128)
000060 bde6      	OUT  0x26,R30
                 ; 0001 0008 CLKPR=0x00;
000061 e0e0      	LDI  R30,LOW(0)
000062 bde6      	OUT  0x26,R30
                 ; 0001 0009 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 000A #pragma optsize+
                 ; 0001 000B #endif
                 ; 0001 000C 
                 ; 0001 000D // Input/Output Ports initialization
                 ; 0001 000E // Port A initialization
                 ; 0001 000F // Func2=In Func1=In Func0=Out
                 ; 0001 0010 // State2=T State1=T State0=0
                 ; 0001 0011 PORTA=0x00;
000063 bbeb      	OUT  0x1B,R30
                 ; 0001 0012 DDRA=0x01;
000064 e0e1      	LDI  R30,LOW(1)
000065 bbea      	OUT  0x1A,R30
                 ; 0001 0013 
                 ; 0001 0014 // Port B initialization
                 ; 0001 0015 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0001 0016 // State7=T State6=T State5=T State4=T State3=T State2=0 State1=0 State0=0
                 ; 0001 0017 PORTB=0x00;
000066 e0e0      	LDI  R30,LOW(0)
000067 bbe8      	OUT  0x18,R30
                 ; 0001 0018 DDRB=0x07;
000068 e0e7      	LDI  R30,LOW(7)
000069 bbe7      	OUT  0x17,R30
                 ; 0001 0019 
                 ; 0001 001A // Port D initialization
                 ; 0001 001B // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 001C // State6=T State5=T State4=T State3=T State2=P State1=T State0=T
                 ; 0001 001D PORTD=0x04;
00006a e0e4      	LDI  R30,LOW(4)
00006b bbe2      	OUT  0x12,R30
                 ; 0001 001E DDRD=0x00;
00006c e0e0      	LDI  R30,LOW(0)
00006d bbe1      	OUT  0x11,R30
                 ; 0001 001F 
                 ; 0001 0020 // Timer/Counter 0 initialization
                 ; 0001 0021 // Clock source: System Clock
                 ; 0001 0022 // Clock value: Timer 0 Stopped
                 ; 0001 0023 // Mode: Normal top=FFh
                 ; 0001 0024 // OC0A output: Disconnected
                 ; 0001 0025 // OC0B output: Disconnected
                 ; 0001 0026 TCCR0A=0x00;
00006e bfe0      	OUT  0x30,R30
                 ; 0001 0027 TCCR0B=0x00;
00006f bfe3      	OUT  0x33,R30
                 ; 0001 0028 TCNT0=0x00;
000070 bfe2      	OUT  0x32,R30
                 ; 0001 0029 OCR0A=0x00;
000071 bfe6      	OUT  0x36,R30
                 ; 0001 002A OCR0B=0x00;
000072 bfec      	OUT  0x3C,R30
                 ; 0001 002B 
                 ; 0001 002C // Timer/Counter 1 initialization
                 ; 0001 002D // Clock source: System Clock
                 ; 0001 002E // Clock value: 31.250 kHz
                 ; 0001 002F // Mode: Normal top=FFFFh
                 ; 0001 0030 // OC1A output: Discon.
                 ; 0001 0031 // OC1B output: Discon.
                 ; 0001 0032 // Noise Canceler: Off
                 ; 0001 0033 // Input Capture on Falling Edge
                 ; 0001 0034 // Timer1 Overflow Interrupt: On
                 ; 0001 0035 // Input Capture Interrupt: Off
                 ; 0001 0036 // Compare A Match Interrupt: Off
                 ; 0001 0037 // Compare B Match Interrupt: Off
                 ; 0001 0038 TCCR1A=0x00;
000073 bdef      	OUT  0x2F,R30
                 ; 0001 0039 TCCR1B=0x04;
000074 e0e4      	LDI  R30,LOW(4)
000075 bdee      	OUT  0x2E,R30
                 ; 0001 003A TCNT1H=0xF3;
000076 d0ce      	RCALL SUBOPT_0x0
                 ; 0001 003B TCNT1L=0xCA;
                 ; 0001 003C ICR1H=0x00;
000077 bde5      	OUT  0x25,R30
                 ; 0001 003D ICR1L=0x00;
000078 e0e0      	LDI  R30,LOW(0)
000079 bde4      	OUT  0x24,R30
                 ; 0001 003E OCR1AH=0x00;
00007a bdeb      	OUT  0x2B,R30
                 ; 0001 003F OCR1AL=0x00;
00007b bdea      	OUT  0x2A,R30
                 ; 0001 0040 OCR1BH=0x00;
00007c bde9      	OUT  0x29,R30
                 ; 0001 0041 OCR1BL=0x00;
00007d bde8      	OUT  0x28,R30
                 ; 0001 0042 
                 ; 0001 0043 // External Interrupt(s) initialization
                 ; 0001 0044 // INT0: Off
                 ; 0001 0045 // INT1: Off
                 ; 0001 0046 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0047 GIMSK=0x00;
00007e bfeb      	OUT  0x3B,R30
                 ; 0001 0048 MCUCR=0x00;
00007f bfe5      	OUT  0x35,R30
                 ; 0001 0049 
                 ; 0001 004A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 004B TIMSK=0x80;
000080 e8e0      	LDI  R30,LOW(128)
000081 bfe9      	OUT  0x39,R30
                 ; 0001 004C 
                 ; 0001 004D // Universal Serial Interface initialization
                 ; 0001 004E // Mode: Disabled
                 ; 0001 004F // Clock source: Register & Counter=no clk.
                 ; 0001 0050 // USI Counter Overflow Interrupt: Off
                 ; 0001 0051 USICR=0x00;
000082 e0e0      	LDI  R30,LOW(0)
000083 b9ed      	OUT  0xD,R30
                 ; 0001 0052 
                 ; 0001 0053 // USART initialization
                 ; 0001 0054 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 0055 // USART Receiver: On
                 ; 0001 0056 // USART Transmitter: On
                 ; 0001 0057 // USART Mode: Asynchronous
                 ; 0001 0058 // USART Baud Rate: 9600
                 ; 0001 0059 UCSRA=0x00;
000084 b9eb      	OUT  0xB,R30
                 ; 0001 005A UCSRB=0x98;
000085 e9e8      	LDI  R30,LOW(152)
000086 b9ea      	OUT  0xA,R30
                 ; 0001 005B UCSRC=0x06;
000087 e0e6      	LDI  R30,LOW(6)
000088 b9e3      	OUT  0x3,R30
                 ; 0001 005C UBRRH=0x00;
000089 e0e0      	LDI  R30,LOW(0)
00008a b9e2      	OUT  0x2,R30
                 ; 0001 005D UBRRL=0x33;
00008b e3e3      	LDI  R30,LOW(51)
00008c b9e9      	OUT  0x9,R30
                 ; 0001 005E 
                 ; 0001 005F // Analog Comparator initialization
                 ; 0001 0060 // Analog Comparator: Off
                 ; 0001 0061 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0062 ACSR=0x80;
00008d e8e0      	LDI  R30,LOW(128)
00008e b9e8      	OUT  0x8,R30
                 ; 0001 0063 
                 ; 0001 0064 // Global enable interrupts
                 ; 0001 0065 #asm("sei")
00008f 9478      	sei
                 ; 0001 0066 }
000090 9508      	RET
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include "project.h"
                 ;
                 ;//#define RXB8 1
                 ;//#define TXB8 0
                 ;//#define UPE 2
                 ;#define OVR 3
                 ;//#define FE 4
                 ;//#define UDRE 5
                 ;//#define RXC 7
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<OVR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;
                 ;char command;
                 ;char command_ready = 0;
                 ;
                 ;
                 ;char state = 0;
                 ;
                 ;// Receive EG0 (off) or EG1 (on) commands from the base station...
                 ;
                 ;void HandleChar(char c)
                 ; 0002 0028 {
                 
                 	.CSEG
                 _HandleChar:
                 ; 0002 0029     putchar(c);
                 ;	c -> Y+0
000091 81e8      	LD   R30,Y
000092 93ea      	ST   -Y,R30
000093 d0ab      	RCALL _putchar
                 ; 0002 002A     switch (state)
000094 2de4      	MOV  R30,R4
000095 e0f0      	LDI  R31,0
                 ; 0002 002B     {
                 ; 0002 002C         case 0: // ready;
000096 9730      	SBIW R30,0
000097 f459      	BRNE _0x40006
                 ; 0002 002D             if (c == 'O') state = 1;
000098 81a8      	LD   R26,Y
000099 34af      	CPI  R26,LOW(0x4F)
00009a f411      	BRNE _0x40007
00009b e0e1      	LDI  R30,LOW(1)
00009c 2e4e      	MOV  R4,R30
                 ; 0002 002E             if (c == 'E') state = 3;
                 _0x40007:
00009d 81a8      	LD   R26,Y
00009e 34a5      	CPI  R26,LOW(0x45)
00009f f411      	BRNE _0x40008
0000a0 e0e3      	LDI  R30,LOW(3)
0000a1 2e4e      	MOV  R4,R30
                 ; 0002 002F             break;
                 _0x40008:
0000a2 c037      	RJMP _0x40005
                 ; 0002 0030 
                 ; 0002 0031         case 1: // "O"
                 _0x40006:
0000a3 30e1      	CPI  R30,LOW(0x1)
0000a4 e0a0      	LDI  R26,HIGH(0x1)
0000a5 07fa      	CPC  R31,R26
0000a6 f441      	BRNE _0x40009
                 ; 0002 0032             if (c == 'K') state = 2;
0000a7 81a8      	LD   R26,Y
0000a8 34ab      	CPI  R26,LOW(0x4B)
0000a9 f419      	BRNE _0x4000A
0000aa e0e2      	LDI  R30,LOW(2)
0000ab 2e4e      	MOV  R4,R30
                 ; 0002 0033             else state = 0;
0000ac c001      	RJMP _0x4000B
                 _0x4000A:
0000ad 2444      	CLR  R4
                 ; 0002 0034             break;
                 _0x4000B:
0000ae c02b      	RJMP _0x40005
                 ; 0002 0035 
                 ; 0002 0036         case 2: // "OK"
                 _0x40009:
0000af 30e2      	CPI  R30,LOW(0x2)
0000b0 e0a0      	LDI  R26,HIGH(0x2)
0000b1 07fa      	CPC  R31,R26
0000b2 f451      	BRNE _0x4000C
                 ; 0002 0037             if (c == '\r')
0000b3 81a8      	LD   R26,Y
0000b4 30ad      	CPI  R26,LOW(0xD)
0000b5 f429      	BRNE _0x4000D
                 ; 0002 0038             {
                 ; 0002 0039                 command = COMMAND_OK;
0000b6 e0e1      	LDI  R30,LOW(1)
0000b7 93e0 0080 	STS  _command,R30
                 ; 0002 003A                 command_ready = 1;
0000b9 93e0 0081 	STS  _command_ready,R30
                 ; 0002 003B                 state = 0;
                 ; 0002 003C             }
                 ; 0002 003D             else state = 0;
                 _0x4000D:
                 _0x4001F:
0000bb 2444      	CLR  R4
                 ; 0002 003E             break;
0000bc c01d      	RJMP _0x40005
                 ; 0002 003F 
                 ; 0002 0040         case 3: // "E"
                 _0x4000C:
0000bd 30e3      	CPI  R30,LOW(0x3)
0000be e0a0      	LDI  R26,HIGH(0x3)
0000bf 07fa      	CPC  R31,R26
0000c0 f441      	BRNE _0x4000F
                 ; 0002 0041             if (c == 'G') state = 4;
0000c1 81a8      	LD   R26,Y
0000c2 34a7      	CPI  R26,LOW(0x47)
0000c3 f419      	BRNE _0x40010
0000c4 e0e4      	LDI  R30,LOW(4)
0000c5 2e4e      	MOV  R4,R30
                 ; 0002 0042             else state = 0;
0000c6 c001      	RJMP _0x40011
                 _0x40010:
0000c7 2444      	CLR  R4
                 ; 0002 0043             break;
                 _0x40011:
0000c8 c011      	RJMP _0x40005
                 ; 0002 0044 
                 ; 0002 0045 
                 ; 0002 0046         case 4: // 'EG'
                 _0x4000F:
0000c9 30e4      	CPI  R30,LOW(0x4)
0000ca e0a0      	LDI  R26,HIGH(0x4)
0000cb 07fa      	CPC  R31,R26
0000cc f469      	BRNE _0x40005
                 ; 0002 0047             if (c == '1')
0000cd 81a8      	LD   R26,Y
0000ce 33a1      	CPI  R26,LOW(0x31)
0000cf f411      	BRNE _0x40013
                 ; 0002 0048             {
                 ; 0002 0049                 SetLightState(1);
0000d0 e0e1      	LDI  R30,LOW(1)
0000d1 c004      	RJMP _0x40020
                 ; 0002 004A                 LinkDetected();
                 ; 0002 004B             }
                 ; 0002 004C             else if (c == '0')
                 _0x40013:
0000d2 81a8      	LD   R26,Y
0000d3 33a0      	CPI  R26,LOW(0x30)
0000d4 f421      	BRNE _0x40015
                 ; 0002 004D             {
                 ; 0002 004E                 SetLightState(0);
0000d5 e0e0      	LDI  R30,LOW(0)
                 _0x40020:
0000d6 93ea      	ST   -Y,R30
0000d7 d01d      	RCALL _SetLightState
                 ; 0002 004F                 LinkDetected();
0000d8 d01e      	RCALL _LinkDetected
                 ; 0002 0050             }
                 ; 0002 0051             state = 0;
                 _0x40015:
0000d9 2444      	CLR  R4
                 ; 0002 0052             break;
                 ; 0002 0053     }
                 _0x40005:
                 ; 0002 0054 }
0000da c068      	RJMP _0x2060001
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0002 005B {
                 _usart_rx_isr:
0000db d06f      	RCALL SUBOPT_0x1
                 ; 0002 005C char status,data;
                 ; 0002 005D status=UCSRA;
0000dc d096      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
0000dd b11b      	IN   R17,11
                 ; 0002 005E data=UDR;
0000de b10c      	IN   R16,12
                 ; 0002 005F    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000df 2fe1      	MOV  R30,R17
0000e0 71ec      	ANDI R30,LOW(0x1C)
0000e1 f481      	BRNE _0x40016
                 ; 0002 0060    {
                 ; 0002 0061    rx_buffer[rx_wr_index]=data;
0000e2 2de3      	MOV  R30,R3
0000e3 57ee      	SUBI R30,-LOW(_rx_buffer)
0000e4 8300      	ST   Z,R16
                 ; 0002 0062    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000e5 9433      	INC  R3
0000e6 e0e8      	LDI  R30,LOW(8)
0000e7 15e3      	CP   R30,R3
0000e8 f409      	BRNE _0x40017
0000e9 2433      	CLR  R3
                 ; 0002 0063    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x40017:
0000ea 9453      	INC  R5
0000eb e0e8      	LDI  R30,LOW(8)
0000ec 15e5      	CP   R30,R5
0000ed f411      	BRNE _0x40018
                 ; 0002 0064       {
                 ; 0002 0065       rx_counter=0;
0000ee 2455      	CLR  R5
                 ; 0002 0066       rx_buffer_overflow=1;
0000ef 9a98      	SBI  0x13,0
                 ; 0002 0067       };
                 _0x40018:
                 ; 0002 0068 
                 ; 0002 0069       HandleChar(data);
0000f0 930a      	ST   -Y,R16
0000f1 df9f      	RCALL _HandleChar
                 ; 0002 006A 
                 ; 0002 006B    };
                 _0x40016:
                 ; 0002 006C }
0000f2 d083      	RCALL __LOADLOCR2P
0000f3 d065      	RCALL SUBOPT_0x2
0000f4 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0002 0073 {
                 ; 0002 0074 char data;
                 ; 0002 0075 while (rx_counter==0);
                 ;	data -> R17
                 ; 0002 0076 data=rx_buffer[rx_rd_index];
                 ; 0002 0077 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0002 0078 #asm("cli")
                 ; 0002 0079 --rx_counter;
                 ; 0002 007A #asm("sei")
                 ; 0002 007B return data;
                 ; 0002 007C }
                 ;#pragma used-
                 ;#endif
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include "project.h"
                 ;
                 ;char currentLightState = 0;
                 ;char linkDetectedTimeout = 0;
                 ;char buttonPressed = 0;
                 ;
                 ;static char tenths = 0;
                 ;
                 ;#define BUTTON PIND.2
                 ;#define LED_POWER PORTB.0
                 ;#define LED_LINK PORTB.1
                 ;#define LED_LIGHTS PORTB.2
                 ;
                 ;#define LED_ON 1
                 ;#define LED_OFF 0
                 ;
                 ;void SetLightState(char lightState)
                 ; 0003 0015 {
                 
                 	.CSEG
                 _SetLightState:
                 ; 0003 0016     currentLightState = lightState;
                 ;	lightState -> Y+0
0000f5 8078      	LDD  R7,Y+0
                 ; 0003 0017 }
0000f6 c04c      	RJMP _0x2060001
                 ;
                 ;void LinkDetected()
                 ; 0003 001A {
                 _LinkDetected:
                 ; 0003 001B     linkDetectedTimeout = 20;  // 10 seconds
0000f7 e1e4      	LDI  R30,LOW(20)
0000f8 2e6e      	MOV  R6,R30
                 ; 0003 001C }
0000f9 9508      	RET
                 ;
                 ;void SendString(char flash *string)
                 ; 0003 001F {
                 _SendString:
                 ; 0003 0020     while (*string != 0)
                 ;	*string -> Y+0
                 _0x60003:
0000fa 81e8      	LD   R30,Y
0000fb 81f9      	LDD  R31,Y+1
0000fc 91e4      	LPM  R30,Z
0000fd 30e0      	CPI  R30,0
0000fe f059      	BREQ _0x60005
                 ; 0003 0021     {
                 ; 0003 0022         putchar(*string);
0000ff 81e8      	LD   R30,Y
000100 81f9      	LDD  R31,Y+1
000101 91e4      	LPM  R30,Z
000102 93ea      	ST   -Y,R30
000103 d03b      	RCALL _putchar
                 ; 0003 0023         string++;
000104 81e8      	LD   R30,Y
000105 81f9      	LDD  R31,Y+1
000106 9631      	ADIW R30,1
000107 83e8      	ST   Y,R30
000108 83f9      	STD  Y+1,R31
                 ; 0003 0024     }
000109 cff0      	RJMP _0x60003
                 _0x60005:
                 ; 0003 0025 }
00010a 9622      	ADIW R28,2
00010b 9508      	RET
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0003 0029 {
                 _timer1_ovf_isr:
00010c d03e      	RCALL SUBOPT_0x1
                 ; 0003 002A         // Reinitialize Timer1 value
                 ; 0003 002B     TCNT1H=0xF3CA >> 8;
00010d d037      	RCALL SUBOPT_0x0
                 ; 0003 002C     TCNT1L=0xF3CA & 0xff;
                 ; 0003 002D 
                 ; 0003 002E     if (linkDetectedTimeout > 0)
00010e 15e6      	CP   R30,R6
00010f f418      	BRSH _0x60006
                 ; 0003 002F     {
                 ; 0003 0030         linkDetectedTimeout--;
000110 946a      	DEC  R6
                 ; 0003 0031         LED_LINK = LED_ON;
000111 9ac1      	SBI  0x18,1
                 ; 0003 0032     }
                 ; 0003 0033     else
000112 c003      	RJMP _0x60009
                 _0x60006:
                 ; 0003 0034     {
                 ; 0003 0035         LED_LINK = LED_OFF;
000113 98c1      	CBI  0x18,1
                 ; 0003 0036         LED_LIGHTS = LED_OFF;
000114 98c2      	CBI  0x18,2
                 ; 0003 0037         currentLightState = 0;
000115 2477      	CLR  R7
                 ; 0003 0038     }
                 _0x60009:
                 ; 0003 0039 
                 ; 0003 003A     if (currentLightState == 1)
000116 e0e1      	LDI  R30,LOW(1)
000117 15e7      	CP   R30,R7
000118 f411      	BRNE _0x6000E
                 ; 0003 003B     {
                 ; 0003 003C         LED_LIGHTS = LED_ON;
000119 9ac2      	SBI  0x18,2
                 ; 0003 003D     }
                 ; 0003 003E     else
00011a c001      	RJMP _0x60011
                 _0x6000E:
                 ; 0003 003F     {
                 ; 0003 0040         LED_LIGHTS = LED_OFF;
00011b 98c2      	CBI  0x18,2
                 ; 0003 0041     }
                 _0x60011:
                 ; 0003 0042 
                 ; 0003 0043     if (BUTTON == 0)
00011c 9982      	SBIC 0x10,2
00011d c00f      	RJMP _0x60014
                 ; 0003 0044     {
                 ; 0003 0045         if (!buttonPressed)
00011e 2099      	TST  R9
00011f f461      	BRNE _0x60015
                 ; 0003 0046         {
                 ; 0003 0047             buttonPressed = 1;
000120 e0e1      	LDI  R30,LOW(1)
000121 2e9e      	MOV  R9,R30
                 ; 0003 0048             if (currentLightState == 1)
000122 15e7      	CP   R30,R7
000123 f419      	BRNE _0x60016
                 ; 0003 0049             {
                 ; 0003 004A                 SendString("S0");
                +
000124 e3ee     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
000125 e0f0     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
000126 c002      	RJMP _0x6001F
                 ; 0003 004B             }
                 ; 0003 004C             else
                 _0x60016:
                 ; 0003 004D             {
                 ; 0003 004E                 SendString("S1");
                +
000127 e4e1     +LDI R30 , LOW ( 2 * _0x60000 + ( 3 ) )
000128 e0f0     +LDI R31 , HIGH ( 2 * _0x60000 + ( 3 ) )
                 	__POINTW1FN _0x60000,3
                 _0x6001F:
000129 93fa      	ST   -Y,R31
00012a 93ea      	ST   -Y,R30
00012b dfce      	RCALL _SendString
                 ; 0003 004F             }
                 ; 0003 0050         }
                 ; 0003 0051     }
                 _0x60015:
                 ; 0003 0052     else
00012c c001      	RJMP _0x60018
                 _0x60014:
                 ; 0003 0053     {
                 ; 0003 0054         buttonPressed = 0;
00012d 2499      	CLR  R9
                 ; 0003 0055     }
                 _0x60018:
                 ; 0003 0056 
                 ; 0003 0057     tenths++;
00012e 91e0 008a 	LDS  R30,_tenths_G003
000130 5fef      	SUBI R30,-LOW(1)
000131 93e0 008a 	STS  _tenths_G003,R30
                 ; 0003 0058     if (tenths == 10)
000133 91a0 008a 	LDS  R26,_tenths_G003
000135 30aa      	CPI  R26,LOW(0xA)
000136 f429      	BRNE _0x60019
                 ; 0003 0059     {
                 ; 0003 005A         tenths = 0;
000137 e0e0      	LDI  R30,LOW(0)
000138 93e0 008a 	STS  _tenths_G003,R30
                 ; 0003 005B         LED_POWER = LED_ON;
00013a 9ac0      	SBI  0x18,0
                 ; 0003 005C     }
                 ; 0003 005D     else
00013b c001      	RJMP _0x6001C
                 _0x60019:
                 ; 0003 005E     {
                 ; 0003 005F         LED_POWER = LED_OFF;
00013c 98c0      	CBI  0x18,0
                 ; 0003 0060     }
                 _0x6001C:
                 ; 0003 0061 }
00013d d01b      	RCALL SUBOPT_0x2
00013e 9518      	RETI
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 putchar0:
00013f 9b5d           sbis usr,udre
000140 cffe           rjmp putchar0
000141 81e8           ld   r30,y
000142 b9ec           out  udr,r30
                 _0x2060001:
000143 9621      	ADIW R28,1
000144 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _command:
000080           	.BYTE 0x1
                 _command_ready:
000081           	.BYTE 0x1
                 _rx_buffer:
000082           	.BYTE 0x8
                 _tenths_G003:
00008a           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000145 efe3      	LDI  R30,LOW(243)
000146 bded      	OUT  0x2D,R30
000147 ecea      	LDI  R30,LOW(202)
000148 bdec      	OUT  0x2C,R30
000149 e0e0      	LDI  R30,LOW(0)
00014a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
00014b 920a      	ST   -Y,R0
00014c 921a      	ST   -Y,R1
00014d 92fa      	ST   -Y,R15
00014e 936a      	ST   -Y,R22
00014f 937a      	ST   -Y,R23
000150 938a      	ST   -Y,R24
000151 939a      	ST   -Y,R25
000152 93aa      	ST   -Y,R26
000153 93ba      	ST   -Y,R27
000154 93ea      	ST   -Y,R30
000155 93fa      	ST   -Y,R31
000156 b7ef      	IN   R30,SREG
000157 93ea      	ST   -Y,R30
000158 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2:
000159 91e9      	LD   R30,Y+
00015a bfef      	OUT  SREG,R30
00015b 91f9      	LD   R31,Y+
00015c 91e9      	LD   R30,Y+
00015d 91b9      	LD   R27,Y+
00015e 91a9      	LD   R26,Y+
00015f 9199      	LD   R25,Y+
000160 9189      	LD   R24,Y+
000161 9179      	LD   R23,Y+
000162 9169      	LD   R22,Y+
000163 90f9      	LD   R15,Y+
000164 9019      	LD   R1,Y+
000165 9009      	LD   R0,Y+
000166 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000167 91e9      	ld   r30,y+
000168 91f9      	ld   r31,y+
000169 9630      	adiw r30,0
00016a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00016b ed80     +LDI R24 , LOW ( 0x7D0 )
00016c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00016d 9701     +SBIW R24 , 1
00016e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00016f 95a8      	wdr
000170 9731      	sbiw r30,1
000171 f7c9      	brne __delay_ms0
                 __delay_ms1:
000172 9508      	ret
                 
                 __SAVELOCR2:
000173 931a      	ST   -Y,R17
000174 930a      	ST   -Y,R16
000175 9508      	RET
                 
                 __LOADLOCR2P:
000176 9109      	LD   R16,Y+
000177 9119      	LD   R17,Y+
000178 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313V register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   4 r4 :   9 r5 :   3 r6 :   3 r7 :   4 
r8 :   0 r9 :   3 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   5 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   4 r26:  32 r27:   3 r28:   3 r29:   0 r30: 136 r31:  20 
x  :   3 y  :  56 z  :  10 
Registers used: 23 out of 35 (65.7%)

ATtiny2313V instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   4 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   4 
cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   9 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   5 
cpc   :   4 cpi   :  13 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   2 ld    :  28 ldd   :   4 ldi   :  55 lds   :   2 lpm   :  11 
lsl   :   0 lsr   :   0 mov   :   9 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  44 
pop   :   0 push  :   0 rcall :  16 ret   :  10 reti  :   2 rjmp  :  40 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   4 sbic  :   1 
sbis  :   1 sbiw  :   5 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  27 std   :   1 
sts   :   4 sub   :   0 subi  :   2 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 38 out of 114 (33.3%)

ATtiny2313V memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002f2    710     44    754    2048  36.8%
[.dseg] 0x000060 0x00008b      0     11     11     128   8.6%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 8 warnings
