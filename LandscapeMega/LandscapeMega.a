;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;
;
;#define COMMAND_OK 1
;#define COMMAND_18 2
;#define COMMAND_ON 3
;#define COMMAND_OFF 4
;
;char command;
;char command_ready = 0;
;
;
;char state = 0;
;
;void HandleChar(char c)
; 0000 002B {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 002C     switch (state)
;	c -> Y+0
;PCODE: $0000000C VOL: 0
; 0000 002D     {
; 0000 002E         case 0: // ready;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002F             if (c == 'O') state = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0030             if (c == '1') state = 3;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0031             if (c == 'S') state = 5;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0032             break;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0033 
; 0000 0034         case 1: // "O"
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0035             if (c == 'K') state = 2;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0036             else state = 0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0037             break;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0038 
; 0000 0039         case 2: // "OK"
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003A             if (c == '\r')
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003B             {
; 0000 003C                 command = COMMAND_OK;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003D                 command_ready = 1;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003E                 state = 0;
;PCODE: $00000039 VOL: 0
; 0000 003F             }
; 0000 0040             else state = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0041             break;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0042 
; 0000 0043         case 3: // "1"
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0044             if (c == '8') state = 4;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0045             else state = 0;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0046             break;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0047 
; 0000 0048         case 4: // "18"
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0049             if (c == '\r')
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004A             {
; 0000 004B                 command = COMMAND_18;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004C                 command_ready = 1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004D                 state = 0;
;PCODE: $00000056 VOL: 0
; 0000 004E             }
; 0000 004F             else state = 0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0050             break;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0051 
; 0000 0052         case 5: // 'S'
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0053             if (c == '1')
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0054             {
; 0000 0055                 state = 6;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0056             }
; 0000 0057             else if (c == '0')
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0058             {
; 0000 0059                 state = 7;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005A                 return;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005B             }
; 0000 005C             else state = 0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 005D             break;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 005E 
; 0000 005F         case 6: // "S1"
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0060             if (c == '\r')
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0061             {
; 0000 0062                 command = COMMAND_ON;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0063                 command_ready = 1;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0064                 state = 0;
;PCODE: $0000007C VOL: 0
; 0000 0065             }
; 0000 0066             else state = 0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0067             break;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0068 
; 0000 0069         case 7: // "S0"
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006A             if (c == '\r')
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 006B             {
; 0000 006C                 command = COMMAND_OFF;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006D                 command_ready = 1;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006E                 state = 0;
;PCODE: $0000008C VOL: 0
; 0000 006F             }
; 0000 0070             else state = 0;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0071             break;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0072     }
;PCODE: $00000092 VOL: 0
; 0000 0073 }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 007A {
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 007B char status,data;
; 0000 007C status=UCSRA;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 007D data=UDR;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 007E    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 007F    {
; 0000 0080    rx_buffer[rx_wr_index]=data;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0081    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0082    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0083       {
; 0000 0084       rx_counter=0;
;PCODE: $000000AF VOL: 0
; 0000 0085       rx_buffer_overflow=1;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0086       };
;PCODE: $000000B3 VOL: 0
; 0000 0087 
; 0000 0088       HandleChar(data);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0089 
; 0000 008A    };
;PCODE: $000000B6 VOL: 0
; 0000 008B }
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0092 {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0093 char data;
; 0000 0094 while (rx_counter==0);
;PCODE: $000000BD VOL: 0
;	data -> R17
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0095 data=rx_buffer[rx_rd_index];
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0096 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0097 #asm("cli")
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
	cli
;PCODE: $000000CE VOL: 0
; 0000 0098 --rx_counter;
;PCODE: $000000CF VOL: 0
; 0000 0099 #asm("sei")
;PCODE: $000000D0 VOL: 0
	sei
;PCODE: $000000D1 VOL: 0
; 0000 009A return data;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 009B }
;PCODE: $000000D5 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void init(void)
; 0000 00A5 {
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00A6 // Crystal Oscillator division factor: 1
; 0000 00A7 #pragma optsize-
; 0000 00A8 CLKPR=0x80;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A9 CLKPR=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00AA #ifdef _OPTIMIZE_SIZE_
; 0000 00AB #pragma optsize+
; 0000 00AC #endif
; 0000 00AD 
; 0000 00AE // Input/Output Ports initialization
; 0000 00AF // Port A initialization
; 0000 00B0 // Func2=In Func1=In Func0=In
; 0000 00B1 // State2=T State1=T State0=T
; 0000 00B2 PORTA=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00B3 DDRA=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00B4 
; 0000 00B5 // Port B initialization
; 0000 00B6 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00B7 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00B8 PORTB=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00B9 DDRB=0xFF;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00BA 
; 0000 00BB // Port D initialization
; 0000 00BC // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00BD // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00BE PORTD=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00BF DDRD=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00C0 
; 0000 00C1 // Timer/Counter 0 initialization
; 0000 00C2 // Clock source: System Clock
; 0000 00C3 // Clock value: Timer 0 Stopped
; 0000 00C4 // Mode: Normal top=FFh
; 0000 00C5 // OC0A output: Disconnected
; 0000 00C6 // OC0B output: Disconnected
; 0000 00C7 TCCR0A=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00C8 TCCR0B=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00C9 TCNT0=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00CA OCR0A=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00CB OCR0B=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00CC 
; 0000 00CD // Timer/Counter 1 initialization
; 0000 00CE // Clock source: System Clock
; 0000 00CF // Clock value: Timer1 Stopped
; 0000 00D0 // Mode: Normal top=FFFFh
; 0000 00D1 // OC1A output: Discon.
; 0000 00D2 // OC1B output: Discon.
; 0000 00D3 // Noise Canceler: Off
; 0000 00D4 // Input Capture on Falling Edge
; 0000 00D5 // Timer1 Overflow Interrupt: Off
; 0000 00D6 // Input Capture Interrupt: Off
; 0000 00D7 // Compare A Match Interrupt: Off
; 0000 00D8 // Compare B Match Interrupt: Off
; 0000 00D9 TCCR1A=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00DA TCCR1B=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00DB TCNT1H=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00DC TCNT1L=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00DD ICR1H=0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00DE ICR1L=0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00DF OCR1AH=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00E0 OCR1AL=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00E1 OCR1BH=0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00E2 OCR1BL=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00E3 
; 0000 00E4 // External Interrupt(s) initialization
; 0000 00E5 // INT0: Off
; 0000 00E6 // INT1: Off
; 0000 00E7 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00E8 GIMSK=0x00;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00E9 MCUCR=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00EA 
; 0000 00EB // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00EC TIMSK=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00ED 
; 0000 00EE // Universal Serial Interface initialization
; 0000 00EF // Mode: Disabled
; 0000 00F0 // Clock source: Register & Counter=no clk.
; 0000 00F1 // USI Counter Overflow Interrupt: Off
; 0000 00F2 USICR=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00F3 
; 0000 00F4 // USART initialization
; 0000 00F5 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00F6 // USART Receiver: On
; 0000 00F7 // USART Transmitter: On
; 0000 00F8 // USART Mode: Asynchronous
; 0000 00F9 // USART Baud Rate: 9600
; 0000 00FA UCSRA=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00FB UCSRB=0x98;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00FC UCSRC=0x06;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00FD UBRRH=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00FE UBRRL=0x33;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00FF 
; 0000 0100 // Analog Comparator initialization
; 0000 0101 // Analog Comparator: Off
; 0000 0102 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0103 ACSR=0x80;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0104 
; 0000 0105 // Global enable interrupts
; 0000 0106 #asm("sei")
;PCODE: $0000011A VOL: 0
	sei
;PCODE: $0000011B VOL: 0
; 0000 0107 }
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;
;void D(char v)
; 0000 010A {
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 010B     PORTA = 255 - v;
;	v -> Y+0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 010C }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;
;
;void SendString(char flash *string)
; 0000 0110 {
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0111     while (*string != 0)
;	*string -> Y+0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0112     {
; 0000 0113         putchar(*string);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0114         string++;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0115     }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0116 }
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;
;char ValidateResponse(char flash *template)
; 0000 0119 {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 011A     char i = 0;
; 0000 011B     while (*template != 0)
;PCODE: $0000013C VOL: 0
;	*template -> Y+1
;	i -> R17
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 011C     {
; 0000 011D         if (*template != getchar())
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 011E         {
; 0000 011F             return 0;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0120         }
; 0000 0121         template++;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0122         i++;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0123     }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0124     return 1;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0125 }
;PCODE: $0000015D VOL: 0
;
;void WaitCommand()
; 0000 0128 {
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0129     while (command_ready == 0);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 012A     command_ready = 0;
;PCODE: $00000165 VOL: 0
; 0000 012B }
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;
;
;void FindPartner()
; 0000 012F {
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0130 char x;
; 0000 0131 
; 0000 0132     D(0);
;PCODE: $0000016A VOL: 0
;	x -> R17
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0133     delay_ms(1000);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0134 
; 0000 0135     SendString("+++");
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0136     WaitCommand();
;PCODE: $00000175 VOL: 0
; 0000 0137     if (command == COMMAND_OK)
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0138     {
; 0000 0139         D(31);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 013A     }
; 0000 013B 
; 0000 013C 
; 0000 013D 
; 0000 013E //    x = ValidateResponse("OK\r");
; 0000 013F 
; 0000 0140 
; 0000 0141         // ask for the association mode
; 0000 0142     while (0)
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0143     {
; 0000 0144     PORTA = 1;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0145 
; 0000 0146 
; 0000 0147 
; 0000 0148 
; 0000 0149     }
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 014A 
; 0000 014B     SendString("ATCN\r");
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 014C     WaitCommand();
;PCODE: $00000187 VOL: 0
; 0000 014D     //x = ValidateResponse("OK\r");
; 0000 014E }
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;
;
;
;
;void Handshake()
; 0000 0154 {
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0155         PORTA = 255;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0156         putsf("EGHome\r");
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0157 
; 0000 0158         PORTA = 254;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0159 
; 0000 015A         while (rx_counter == 0)
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 015B         {
; 0000 015C 
; 0000 015D         }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 015E         PORTA = 253;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 015F         WaitCommand();
;PCODE: $0000019C VOL: 0
; 0000 0160         if (command == COMMAND_18)
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0161         {
; 0000 0162         }
; 0000 0163 
; 0000 0164         delay_ms(50);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0165 
; 0000 0166         //return ValidateResponse("1804\r");
; 0000 0167 }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;
;
;
;void main(void)
; 0000 016C {
;PCODE: $000001A6 VOL: 0
; 0000 016D     char value = 0;
; 0000 016E 
; 0000 016F     init();
;	value -> R17
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0170 
; 0000 0171     while (1)
;PCODE: $000001AA VOL: 0
; 0000 0172     {
; 0000 0173         value++;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0174         PORTB = value;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0175         delay_ms(50);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0176 
; 0000 0177 
; 0000 0178     }
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0179 
; 0000 017A     FindPartner();
;PCODE: $000001B4 VOL: 0
; 0000 017B     while (1)
;PCODE: $000001B5 VOL: 0
; 0000 017C     {
; 0000 017D         Handshake();
;PCODE: $000001B6 VOL: 0
; 0000 017E         putsf("Ready");
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 017F 
; 0000 0180         while (1)
;PCODE: $000001BB VOL: 0
; 0000 0181         {
; 0000 0182             WaitCommand();
;PCODE: $000001BC VOL: 0
; 0000 0183             if (command == COMMAND_ON)
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0184             {
; 0000 0185                 putsf("1");
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0186                 D(255);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0187             }
; 0000 0188             else if (command == COMMAND_OFF)
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0189             {
; 0000 018A                 putsf("0");
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 018B                 D(0);
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 018C             }
; 0000 018D 
; 0000 018E 
; 0000 018F         }
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0190 
; 0000 0191 
; 0000 0192     }
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0193 
; 0000 0194 
; 0000 0195 
; 0000 0196 while (0)
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0197       {
; 0000 0198 
; 0000 0199       while (0)
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 019A       {
; 0000 019B         delay_ms(50);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 019C         value++;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 019D         PORTA = value;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 019E 
; 0000 019F       }
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 01A0 
; 0000 01A1       while (0)
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 01A2       {
; 0000 01A3         putchar(value);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 01A4         value++;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 01A5       }
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 01A6 
; 0000 01A7       // Place your code here
; 0000 01A8       delay_ms(1500);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 01A9       putchar('+');
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 01AA       putchar('+');
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 01AB       putchar('+');
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 01AC       delay_ms(1000);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 01AD       value = getchar();
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 01AE 
; 0000 01AF       if (value == 'O')
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 01B0       {
; 0000 01B1            value = getchar();
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 01B2 
; 0000 01B3            putsf("ATCN");
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 01B4            getchar();
;PCODE: $00000208 VOL: 0
; 0000 01B5            getchar();
;PCODE: $00000209 VOL: 0
; 0000 01B6 
; 0000 01B7            putsf("Hello");
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 01B8       while (1)
;PCODE: $0000020E VOL: 0
; 0000 01B9       {
; 0000 01BA 
; 0000 01BB            value = getchar();
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 01BC            PORTA = value;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 01BD            putchar(value);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 01BE 
; 0000 01BF       }
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 01C0 
; 0000 01C1       while (0)
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 01C2       {
; 0000 01C3         delay_ms(50);
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 01C4         value++;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 01C5         PORTA = value;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 01C6         putchar(value);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 01C7 
; 0000 01C8       }
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 01C9 
; 0000 01CA       }
; 0000 01CB 
; 0000 01CC       PORTA=value;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 01CD 
; 0000 01CE     delay_ms(1000000000);
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 01CF 
; 0000 01D0 
; 0000 01D1 
; 0000 01D2       };
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 01D3 }
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
