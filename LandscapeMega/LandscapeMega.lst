
AVRASM ver. 2.1.30  D:\AvrProjects\LandscapeMega\LandscapeMega.asm Fri Jan 22 20:37:11 2010

D:\AvrProjects\LandscapeMega\LandscapeMega.asm(1051): warning: Register r5 already defined by the .DEF directive
D:\AvrProjects\LandscapeMega\LandscapeMega.asm(1052): warning: Register r4 already defined by the .DEF directive
D:\AvrProjects\LandscapeMega\LandscapeMega.asm(1053): warning: Register r7 already defined by the .DEF directive
D:\AvrProjects\LandscapeMega\LandscapeMega.asm(1054): warning: Register r6 already defined by the .DEF directive
D:\AvrProjects\LandscapeMega\LandscapeMega.asm(1055): warning: Register r9 already defined by the .DEF directive
D:\AvrProjects\LandscapeMega\LandscapeMega.asm(1056): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.5b Standard
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _command=R6
                 	.DEF _command_ready=R9
                 	.DEF _state=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 0050 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 00e4 	JMP  _usart_rx_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 _0x5C:
000034 0000      	.DB  0x0,0x0
                 _0x0:
000035 2b2b
000036 002b
000037 5441
000038 4e43      	.DB  0x2B,0x2B,0x2B,0x0,0x41,0x54,0x43,0x4E
000039 000d
00003a 4745
00003b 6f48
00003c 656d      	.DB  0xD,0x0,0x45,0x47,0x48,0x6F,0x6D,0x65
00003d 000d
00003e 6552
00003f 6461
000040 0079      	.DB  0xD,0x0,0x52,0x65,0x61,0x64,0x79,0x0
000041 0031
000042 0030
000043 5441
000044 4e43      	.DB  0x31,0x0,0x30,0x0,0x41,0x54,0x43,0x4E
000045 4800
000046 6c65
000047 6f6c
D:\AvrProjects\LandscapeMega\LandscapeMega.asm(1101): warning: .cseg .db misalignment - padding zero byte
000048 0000      	.DB  0x0,0x48,0x65,0x6C,0x6C,0x6F,0x0
                 
                 __GLOBAL_INI_TBL:
000049 0001      	.DW  0x01
00004a 0002      	.DW  0x02
00004b 0066      	.DW  __REG_BIT_VARS*2
                 
00004c 0002      	.DW  0x02
00004d 0008      	.DW  0x08
00004e 0068      	.DW  _0x5C*2
                 
                 _0xFFFFFFFF:
00004f 0000      	.DW  0
                 
                 __RESET:
000050 94f8      	CLI
000051 27ee      	CLR  R30
000052 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000053 e0f1      	LDI  R31,1
000054 bffb      	OUT  GICR,R31
000055 bfeb      	OUT  GICR,R30
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000057 e1f8      	LDI  R31,0x18
000058 bdf1      	OUT  WDTCR,R31
000059 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00005a e08d      	LDI  R24,(14-2)+1
00005b e0a2      	LDI  R26,2
00005c 27bb      	CLR  R27
                 __CLEAR_REG:
00005d 93ed      	ST   X+,R30
00005e 958a      	DEC  R24
00005f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000060 e080      	LDI  R24,LOW(0x400)
000061 e094      	LDI  R25,HIGH(0x400)
000062 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000063 93ed      	ST   X+,R30
000064 9701      	SBIW R24,1
000065 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000066 e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000067 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000068 9185      	LPM  R24,Z+
000069 9195      	LPM  R25,Z+
00006a 9700      	SBIW R24,0
00006b f061      	BREQ __GLOBAL_INI_END
00006c 91a5      	LPM  R26,Z+
00006d 91b5      	LPM  R27,Z+
00006e 9005      	LPM  R0,Z+
00006f 9015      	LPM  R1,Z+
000070 01bf      	MOVW R22,R30
000071 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000072 9005      	LPM  R0,Z+
000073 920d      	ST   X+,R0
000074 9701      	SBIW R24,1
000075 f7e1      	BRNE __GLOBAL_INI_LOOP
000076 01fb      	MOVW R30,R22
000077 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000078 e5ef      	LDI  R30,LOW(0x45F)
000079 bfed      	OUT  SPL,R30
00007a e0e4      	LDI  R30,HIGH(0x45F)
00007b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007c e6c0      	LDI  R28,LOW(0x160)
00007d e0d1      	LDI  R29,HIGH(0x160)
                 
00007e 940c 019a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;#define RXB8 1
                 ;#define TXB8 0
                 ;#define UPE 2
                 ;#define OVR 3
                 ;#define FE 4
                 ;#define UDRE 5
                 ;#define RXC 7
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<OVR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;
                 ;
                 ;#define COMMAND_OK 1
                 ;#define COMMAND_18 2
                 ;#define COMMAND_ON 3
                 ;#define COMMAND_OFF 4
                 ;
                 ;char command;
                 ;char command_ready = 0;
                 ;
                 ;
                 ;char state = 0;
                 ;
                 ;void HandleChar(char c)
                 ; 0000 002B {
                 
                 	.CSEG
                 _HandleChar:
                 ; 0000 002C     switch (state)
                 ;	c -> Y+0
000080 2de8      	MOV  R30,R8
                 ; 0000 002D     {
                 ; 0000 002E         case 0: // ready;
000081 30e0      	CPI  R30,0
000082 f481      	BRNE _0x6
                 ; 0000 002F             if (c == 'O') state = 1;
000083 81a8      	LD   R26,Y
000084 34af      	CPI  R26,LOW(0x4F)
000085 f411      	BRNE _0x7
000086 e0e1      	LDI  R30,LOW(1)
000087 2e8e      	MOV  R8,R30
                 ; 0000 0030             if (c == '1') state = 3;
                 _0x7:
000088 81a8      	LD   R26,Y
000089 33a1      	CPI  R26,LOW(0x31)
00008a f411      	BRNE _0x8
00008b e0e3      	LDI  R30,LOW(3)
00008c 2e8e      	MOV  R8,R30
                 ; 0000 0031             if (c == 'S') state = 5;
                 _0x8:
00008d 81a8      	LD   R26,Y
00008e 35a3      	CPI  R26,LOW(0x53)
00008f f411      	BRNE _0x9
000090 e0e5      	LDI  R30,LOW(5)
000091 2e8e      	MOV  R8,R30
                 ; 0000 0032             break;
                 _0x9:
000092 c04f      	RJMP _0x5
                 ; 0000 0033 
                 ; 0000 0034         case 1: // "O"
                 _0x6:
000093 30e1      	CPI  R30,LOW(0x1)
000094 f441      	BRNE _0xA
                 ; 0000 0035             if (c == 'K') state = 2;
000095 81a8      	LD   R26,Y
000096 34ab      	CPI  R26,LOW(0x4B)
000097 f419      	BRNE _0xB
000098 e0e2      	LDI  R30,LOW(2)
000099 2e8e      	MOV  R8,R30
                 ; 0000 0036             else state = 0;
00009a c001      	RJMP _0xC
                 _0xB:
00009b 2488      	CLR  R8
                 ; 0000 0037             break;
                 _0xC:
00009c c045      	RJMP _0x5
                 ; 0000 0038 
                 ; 0000 0039         case 2: // "OK"
                 _0xA:
00009d 30e2      	CPI  R30,LOW(0x2)
00009e f441      	BRNE _0xD
                 ; 0000 003A             if (c == '\r')
00009f 81a8      	LD   R26,Y
0000a0 30ad      	CPI  R26,LOW(0xD)
0000a1 f419      	BRNE _0xE
                 ; 0000 003B             {
                 ; 0000 003C                 command = COMMAND_OK;
0000a2 e0e1      	LDI  R30,LOW(1)
0000a3 2e6e      	MOV  R6,R30
                 ; 0000 003D                 command_ready = 1;
0000a4 2e9e      	MOV  R9,R30
                 ; 0000 003E                 state = 0;
                 ; 0000 003F             }
                 ; 0000 0040             else state = 0;
                 _0xE:
                 _0x57:
0000a5 2488      	CLR  R8
                 ; 0000 0041             break;
0000a6 c03b      	RJMP _0x5
                 ; 0000 0042 
                 ; 0000 0043         case 3: // "1"
                 _0xD:
0000a7 30e3      	CPI  R30,LOW(0x3)
0000a8 f441      	BRNE _0x10
                 ; 0000 0044             if (c == '8') state = 4;
0000a9 81a8      	LD   R26,Y
0000aa 33a8      	CPI  R26,LOW(0x38)
0000ab f419      	BRNE _0x11
0000ac e0e4      	LDI  R30,LOW(4)
0000ad 2e8e      	MOV  R8,R30
                 ; 0000 0045             else state = 0;
0000ae c001      	RJMP _0x12
                 _0x11:
0000af 2488      	CLR  R8
                 ; 0000 0046             break;
                 _0x12:
0000b0 c031      	RJMP _0x5
                 ; 0000 0047 
                 ; 0000 0048         case 4: // "18"
                 _0x10:
0000b1 30e4      	CPI  R30,LOW(0x4)
0000b2 f449      	BRNE _0x13
                 ; 0000 0049             if (c == '\r')
0000b3 81a8      	LD   R26,Y
0000b4 30ad      	CPI  R26,LOW(0xD)
0000b5 f421      	BRNE _0x14
                 ; 0000 004A             {
                 ; 0000 004B                 command = COMMAND_18;
0000b6 e0e2      	LDI  R30,LOW(2)
0000b7 2e6e      	MOV  R6,R30
                 ; 0000 004C                 command_ready = 1;
0000b8 e0e1      	LDI  R30,LOW(1)
0000b9 2e9e      	MOV  R9,R30
                 ; 0000 004D                 state = 0;
                 ; 0000 004E             }
                 ; 0000 004F             else state = 0;
                 _0x14:
                 _0x58:
0000ba 2488      	CLR  R8
                 ; 0000 0050             break;
0000bb c026      	RJMP _0x5
                 ; 0000 0051 
                 ; 0000 0052         case 5: // 'S'
                 _0x13:
0000bc 30e5      	CPI  R30,LOW(0x5)
0000bd f479      	BRNE _0x16
                 ; 0000 0053             if (c == '1')
0000be 81a8      	LD   R26,Y
0000bf 33a1      	CPI  R26,LOW(0x31)
0000c0 f419      	BRNE _0x17
                 ; 0000 0054             {
                 ; 0000 0055                 state = 6;
0000c1 e0e6      	LDI  R30,LOW(6)
0000c2 2e8e      	MOV  R8,R30
                 ; 0000 0056             }
                 ; 0000 0057             else if (c == '0')
0000c3 c008      	RJMP _0x18
                 _0x17:
0000c4 81a8      	LD   R26,Y
0000c5 33a0      	CPI  R26,LOW(0x30)
0000c6 f421      	BRNE _0x19
                 ; 0000 0058             {
                 ; 0000 0059                 state = 7;
0000c7 e0e7      	LDI  R30,LOW(7)
0000c8 2e8e      	MOV  R8,R30
                 ; 0000 005A                 return;
0000c9 940c 01c1 	JMP  _0x2060001
                 ; 0000 005B             }
                 ; 0000 005C             else state = 0;
                 _0x19:
0000cb 2488      	CLR  R8
                 ; 0000 005D             break;
                 _0x18:
0000cc c015      	RJMP _0x5
                 ; 0000 005E 
                 ; 0000 005F         case 6: // "S1"
                 _0x16:
0000cd 30e6      	CPI  R30,LOW(0x6)
0000ce f449      	BRNE _0x1B
                 ; 0000 0060             if (c == '\r')
0000cf 81a8      	LD   R26,Y
0000d0 30ad      	CPI  R26,LOW(0xD)
0000d1 f421      	BRNE _0x1C
                 ; 0000 0061             {
                 ; 0000 0062                 command = COMMAND_ON;
0000d2 e0e3      	LDI  R30,LOW(3)
0000d3 2e6e      	MOV  R6,R30
                 ; 0000 0063                 command_ready = 1;
0000d4 e0e1      	LDI  R30,LOW(1)
0000d5 2e9e      	MOV  R9,R30
                 ; 0000 0064                 state = 0;
                 ; 0000 0065             }
                 ; 0000 0066             else state = 0;
                 _0x1C:
                 _0x59:
0000d6 2488      	CLR  R8
                 ; 0000 0067             break;
0000d7 c00a      	RJMP _0x5
                 ; 0000 0068 
                 ; 0000 0069         case 7: // "S0"
                 _0x1B:
0000d8 30e7      	CPI  R30,LOW(0x7)
0000d9 f441      	BRNE _0x5
                 ; 0000 006A             if (c == '\r')
0000da 81a8      	LD   R26,Y
0000db 30ad      	CPI  R26,LOW(0xD)
0000dc f421      	BRNE _0x1F
                 ; 0000 006B             {
                 ; 0000 006C                 command = COMMAND_OFF;
0000dd e0e4      	LDI  R30,LOW(4)
0000de 2e6e      	MOV  R6,R30
                 ; 0000 006D                 command_ready = 1;
0000df e0e1      	LDI  R30,LOW(1)
0000e0 2e9e      	MOV  R9,R30
                 ; 0000 006E                 state = 0;
                 ; 0000 006F             }
                 ; 0000 0070             else state = 0;
                 _0x1F:
                 _0x5A:
0000e1 2488      	CLR  R8
                 ; 0000 0071             break;
                 ; 0000 0072     }
                 _0x5:
                 ; 0000 0073 }
0000e2 940c 01c1 	JMP  _0x2060001
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 007A {
                 _usart_rx_isr:
0000e4 920a      	ST   -Y,R0
0000e5 921a      	ST   -Y,R1
0000e6 92fa      	ST   -Y,R15
0000e7 936a      	ST   -Y,R22
0000e8 937a      	ST   -Y,R23
0000e9 938a      	ST   -Y,R24
0000ea 939a      	ST   -Y,R25
0000eb 93aa      	ST   -Y,R26
0000ec 93ba      	ST   -Y,R27
0000ed 93ea      	ST   -Y,R30
0000ee 93fa      	ST   -Y,R31
0000ef b7ef      	IN   R30,SREG
0000f0 93ea      	ST   -Y,R30
                 ; 0000 007B char status,data;
                 ; 0000 007C status=UCSRA;
0000f1 931a      	ST   -Y,R17
0000f2 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000f3 b11b      	IN   R17,11
                 ; 0000 007D data=UDR;
0000f4 b10c      	IN   R16,12
                 ; 0000 007E    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000f5 2fe1      	MOV  R30,R17
0000f6 71ec      	ANDI R30,LOW(0x1C)
0000f7 f499      	BRNE _0x21
                 ; 0000 007F    {
                 ; 0000 0080    rx_buffer[rx_wr_index]=data;
0000f8 2de5      	MOV  R30,R5
0000f9 e0f0      	LDI  R31,0
0000fa 5ae0      	SUBI R30,LOW(-_rx_buffer)
0000fb 4ffe      	SBCI R31,HIGH(-_rx_buffer)
0000fc 8300      	ST   Z,R16
                 ; 0000 0081    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000fd 9453      	INC  R5
0000fe e0e8      	LDI  R30,LOW(8)
0000ff 15e5      	CP   R30,R5
000100 f409      	BRNE _0x22
000101 2455      	CLR  R5
                 ; 0000 0082    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x22:
000102 9473      	INC  R7
000103 e0e8      	LDI  R30,LOW(8)
000104 15e7      	CP   R30,R7
000105 f419      	BRNE _0x23
                 ; 0000 0083       {
                 ; 0000 0084       rx_counter=0;
000106 2477      	CLR  R7
                 ; 0000 0085       rx_buffer_overflow=1;
000107 9468      	SET
000108 f820      	BLD  R2,0
                 ; 0000 0086       };
                 _0x23:
                 ; 0000 0087 
                 ; 0000 0088       HandleChar(data);
000109 930a      	ST   -Y,R16
00010a df75      	RCALL _HandleChar
                 ; 0000 0089 
                 ; 0000 008A    };
                 _0x21:
                 ; 0000 008B }
00010b 9109      	LD   R16,Y+
00010c 9119      	LD   R17,Y+
00010d 91e9      	LD   R30,Y+
00010e bfef      	OUT  SREG,R30
00010f 91f9      	LD   R31,Y+
000110 91e9      	LD   R30,Y+
000111 91b9      	LD   R27,Y+
000112 91a9      	LD   R26,Y+
000113 9199      	LD   R25,Y+
000114 9189      	LD   R24,Y+
000115 9179      	LD   R23,Y+
000116 9169      	LD   R22,Y+
000117 90f9      	LD   R15,Y+
000118 9019      	LD   R1,Y+
000119 9009      	LD   R0,Y+
00011a 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0092 {
                 _getchar:
                 ; 0000 0093 char data;
                 ; 0000 0094 while (rx_counter==0);
00011b 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x24:
00011c 2077      	TST  R7
00011d f3f1      	BREQ _0x24
                 ; 0000 0095 data=rx_buffer[rx_rd_index];
00011e 2de4      	MOV  R30,R4
00011f e0f0      	LDI  R31,0
000120 5ae0      	SUBI R30,LOW(-_rx_buffer)
000121 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000122 8110      	LD   R17,Z
                 ; 0000 0096 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
000123 9443      	INC  R4
000124 e0e8      	LDI  R30,LOW(8)
000125 15e4      	CP   R30,R4
000126 f409      	BRNE _0x27
000127 2444      	CLR  R4
                 ; 0000 0097 #asm("cli")
                 _0x27:
000128 94f8      	cli
                 ; 0000 0098 --rx_counter;
000129 947a      	DEC  R7
                 ; 0000 0099 #asm("sei")
00012a 9478      	sei
                 ; 0000 009A return data;
00012b 2fe1      	MOV  R30,R17
00012c c05b      	RJMP _0x2060002
                 ; 0000 009B }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void init(void)
                 ; 0000 00A5 {
                 _init:
                 ; 0000 00A6 // Crystal Oscillator division factor: 1
                 ; 0000 00A7 #pragma optsize-
                 ; 0000 00A8 CLKPR=0x80;
00012d e8e0      	LDI  R30,LOW(128)
00012e bde6      	OUT  0x26,R30
                 ; 0000 00A9 CLKPR=0x00;
00012f e0e0      	LDI  R30,LOW(0)
000130 bde6      	OUT  0x26,R30
                 ; 0000 00AA #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00AB #pragma optsize+
                 ; 0000 00AC #endif
                 ; 0000 00AD 
                 ; 0000 00AE // Input/Output Ports initialization
                 ; 0000 00AF // Port A initialization
                 ; 0000 00B0 // Func2=In Func1=In Func0=In
                 ; 0000 00B1 // State2=T State1=T State0=T
                 ; 0000 00B2 PORTA=0x00;
000131 bbeb      	OUT  0x1B,R30
                 ; 0000 00B3 DDRA=0x00;
000132 bbea      	OUT  0x1A,R30
                 ; 0000 00B4 
                 ; 0000 00B5 // Port B initialization
                 ; 0000 00B6 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 00B7 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 00B8 PORTB=0x00;
000133 bbe8      	OUT  0x18,R30
                 ; 0000 00B9 DDRB=0xFF;
000134 efef      	LDI  R30,LOW(255)
000135 bbe7      	OUT  0x17,R30
                 ; 0000 00BA 
                 ; 0000 00BB // Port D initialization
                 ; 0000 00BC // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00BD // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00BE PORTD=0x00;
000136 e0e0      	LDI  R30,LOW(0)
000137 bbe2      	OUT  0x12,R30
                 ; 0000 00BF DDRD=0x00;
000138 bbe1      	OUT  0x11,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // Timer/Counter 0 initialization
                 ; 0000 00C2 // Clock source: System Clock
                 ; 0000 00C3 // Clock value: Timer 0 Stopped
                 ; 0000 00C4 // Mode: Normal top=FFh
                 ; 0000 00C5 // OC0A output: Disconnected
                 ; 0000 00C6 // OC0B output: Disconnected
                 ; 0000 00C7 TCCR0A=0x00;
000139 bfe0      	OUT  0x30,R30
                 ; 0000 00C8 TCCR0B=0x00;
00013a bfe3      	OUT  0x33,R30
                 ; 0000 00C9 TCNT0=0x00;
00013b bfe2      	OUT  0x32,R30
                 ; 0000 00CA OCR0A=0x00;
00013c bfe6      	OUT  0x36,R30
                 ; 0000 00CB OCR0B=0x00;
00013d bfec      	OUT  0x3C,R30
                 ; 0000 00CC 
                 ; 0000 00CD // Timer/Counter 1 initialization
                 ; 0000 00CE // Clock source: System Clock
                 ; 0000 00CF // Clock value: Timer1 Stopped
                 ; 0000 00D0 // Mode: Normal top=FFFFh
                 ; 0000 00D1 // OC1A output: Discon.
                 ; 0000 00D2 // OC1B output: Discon.
                 ; 0000 00D3 // Noise Canceler: Off
                 ; 0000 00D4 // Input Capture on Falling Edge
                 ; 0000 00D5 // Timer1 Overflow Interrupt: Off
                 ; 0000 00D6 // Input Capture Interrupt: Off
                 ; 0000 00D7 // Compare A Match Interrupt: Off
                 ; 0000 00D8 // Compare B Match Interrupt: Off
                 ; 0000 00D9 TCCR1A=0x00;
00013e bdef      	OUT  0x2F,R30
                 ; 0000 00DA TCCR1B=0x00;
00013f bdee      	OUT  0x2E,R30
                 ; 0000 00DB TCNT1H=0x00;
000140 bded      	OUT  0x2D,R30
                 ; 0000 00DC TCNT1L=0x00;
000141 bdec      	OUT  0x2C,R30
                 ; 0000 00DD ICR1H=0x00;
000142 bde5      	OUT  0x25,R30
                 ; 0000 00DE ICR1L=0x00;
000143 bde4      	OUT  0x24,R30
                 ; 0000 00DF OCR1AH=0x00;
000144 bdeb      	OUT  0x2B,R30
                 ; 0000 00E0 OCR1AL=0x00;
000145 bdea      	OUT  0x2A,R30
                 ; 0000 00E1 OCR1BH=0x00;
000146 bde9      	OUT  0x29,R30
                 ; 0000 00E2 OCR1BL=0x00;
000147 bde8      	OUT  0x28,R30
                 ; 0000 00E3 
                 ; 0000 00E4 // External Interrupt(s) initialization
                 ; 0000 00E5 // INT0: Off
                 ; 0000 00E6 // INT1: Off
                 ; 0000 00E7 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 00E8 GIMSK=0x00;
000148 bfeb      	OUT  0x3B,R30
                 ; 0000 00E9 MCUCR=0x00;
000149 bfe5      	OUT  0x35,R30
                 ; 0000 00EA 
                 ; 0000 00EB // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00EC TIMSK=0x00;
00014a bfe9      	OUT  0x39,R30
                 ; 0000 00ED 
                 ; 0000 00EE // Universal Serial Interface initialization
                 ; 0000 00EF // Mode: Disabled
                 ; 0000 00F0 // Clock source: Register & Counter=no clk.
                 ; 0000 00F1 // USI Counter Overflow Interrupt: Off
                 ; 0000 00F2 USICR=0x00;
00014b b9ed      	OUT  0xD,R30
                 ; 0000 00F3 
                 ; 0000 00F4 // USART initialization
                 ; 0000 00F5 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00F6 // USART Receiver: On
                 ; 0000 00F7 // USART Transmitter: On
                 ; 0000 00F8 // USART Mode: Asynchronous
                 ; 0000 00F9 // USART Baud Rate: 9600
                 ; 0000 00FA UCSRA=0x00;
00014c b9eb      	OUT  0xB,R30
                 ; 0000 00FB UCSRB=0x98;
00014d e9e8      	LDI  R30,LOW(152)
00014e b9ea      	OUT  0xA,R30
                 ; 0000 00FC UCSRC=0x06;
00014f e0e6      	LDI  R30,LOW(6)
000150 b9e3      	OUT  0x3,R30
                 ; 0000 00FD UBRRH=0x00;
000151 e0e0      	LDI  R30,LOW(0)
000152 b9e2      	OUT  0x2,R30
                 ; 0000 00FE UBRRL=0x33;
000153 e3e3      	LDI  R30,LOW(51)
000154 b9e9      	OUT  0x9,R30
                 ; 0000 00FF 
                 ; 0000 0100 // Analog Comparator initialization
                 ; 0000 0101 // Analog Comparator: Off
                 ; 0000 0102 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0103 ACSR=0x80;
000155 e8e0      	LDI  R30,LOW(128)
000156 b9e8      	OUT  0x8,R30
                 ; 0000 0104 
                 ; 0000 0105 // Global enable interrupts
                 ; 0000 0106 #asm("sei")
000157 9478      	sei
                 ; 0000 0107 }
000158 9508      	RET
                 ;
                 ;void D(char v)
                 ; 0000 010A {
                 _D:
                 ; 0000 010B     PORTA = 255 - v;
                 ;	v -> Y+0
000159 81a8      	LD   R26,Y
00015a efef      	LDI  R30,LOW(255)
00015b 1bea      	SUB  R30,R26
00015c bbeb      	OUT  0x1B,R30
                 ; 0000 010C }
00015d c063      	RJMP _0x2060001
                 ;
                 ;
                 ;void SendString(char flash *string)
                 ; 0000 0110 {
                 _SendString:
                 ; 0000 0111     while (*string != 0)
                 ;	*string -> Y+0
                 _0x28:
00015e 81e8      	LD   R30,Y
00015f 81f9      	LDD  R31,Y+1
000160 91e4      	LPM  R30,Z
000161 30e0      	CPI  R30,0
000162 f059      	BREQ _0x2A
                 ; 0000 0112     {
                 ; 0000 0113         putchar(*string);
000163 81e8      	LD   R30,Y
000164 81f9      	LDD  R31,Y+1
000165 91e4      	LPM  R30,Z
000166 93ea      	ST   -Y,R30
000167 d055      	RCALL _putchar
                 ; 0000 0114         string++;
000168 81e8      	LD   R30,Y
000169 81f9      	LDD  R31,Y+1
00016a 9631      	ADIW R30,1
00016b 83e8      	ST   Y,R30
00016c 83f9      	STD  Y+1,R31
                 ; 0000 0115     }
00016d cff0      	RJMP _0x28
                 _0x2A:
                 ; 0000 0116 }
00016e 9622      	ADIW R28,2
00016f 9508      	RET
                 ;
                 ;char ValidateResponse(char flash *template)
                 ; 0000 0119 {
                 ; 0000 011A     char i = 0;
                 ; 0000 011B     while (*template != 0)
                 ;	*template -> Y+1
                 ;	i -> R17
                 ; 0000 011C     {
                 ; 0000 011D         if (*template != getchar())
                 ; 0000 011E         {
                 ; 0000 011F             return 0;
                 ; 0000 0120         }
                 ; 0000 0121         template++;
                 ; 0000 0122         i++;
                 ; 0000 0123     }
                 ; 0000 0124     return 1;
                 ; 0000 0125 }
                 ;
                 ;void WaitCommand()
                 ; 0000 0128 {
                 _WaitCommand:
                 ; 0000 0129     while (command_ready == 0);
                 _0x2F:
000170 2099      	TST  R9
000171 f3f1      	BREQ _0x2F
                 ; 0000 012A     command_ready = 0;
000172 2499      	CLR  R9
                 ; 0000 012B }
000173 9508      	RET
                 ;
                 ;
                 ;void FindPartner()
                 ; 0000 012F {
                 _FindPartner:
                 ; 0000 0130 char x;
                 ; 0000 0131 
                 ; 0000 0132     D(0);
000174 931a      	ST   -Y,R17
                 ;	x -> R17
000175 e0e0      	LDI  R30,LOW(0)
000176 93ea      	ST   -Y,R30
000177 dfe1      	RCALL _D
                 ; 0000 0133     delay_ms(1000);
000178 940e 01d7 	CALL SUBOPT_0x0
                 ; 0000 0134 
                 ; 0000 0135     SendString("+++");
                +
00017a e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00017b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00017c 940e 01dd 	CALL SUBOPT_0x1
                 ; 0000 0136     WaitCommand();
                 ; 0000 0137     if (command == COMMAND_OK)
00017e e0e1      	LDI  R30,LOW(1)
00017f 15e6      	CP   R30,R6
000180 f419      	BRNE _0x32
                 ; 0000 0138     {
                 ; 0000 0139         D(31);
000181 e1ef      	LDI  R30,LOW(31)
000182 93ea      	ST   -Y,R30
000183 dfd5      	RCALL _D
                 ; 0000 013A     }
                 ; 0000 013B 
                 ; 0000 013C 
                 ; 0000 013D 
                 ; 0000 013E //    x = ValidateResponse("OK\r");
                 ; 0000 013F 
                 ; 0000 0140 
                 ; 0000 0141         // ask for the association mode
                 ; 0000 0142     while (0)
                 _0x32:
                 ; 0000 0143     {
                 ; 0000 0144     PORTA = 1;
                 ; 0000 0145 
                 ; 0000 0146 
                 ; 0000 0147 
                 ; 0000 0148 
                 ; 0000 0149     }
                 ; 0000 014A 
                 ; 0000 014B     SendString("ATCN\r");
                +
000184 e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 4 ) )
000185 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW1FN _0x0,4
000186 940e 01dd 	CALL SUBOPT_0x1
                 ; 0000 014C     WaitCommand();
                 ; 0000 014D     //x = ValidateResponse("OK\r");
                 ; 0000 014E }
                 _0x2060002:
000188 9119      	LD   R17,Y+
000189 9508      	RET
                 ;
                 ;
                 ;
                 ;
                 ;void Handshake()
                 ; 0000 0154 {
                 _Handshake:
                 ; 0000 0155         PORTA = 255;
00018a efef      	LDI  R30,LOW(255)
00018b bbeb      	OUT  0x1B,R30
                 ; 0000 0156         putsf("EGHome\r");
                +
00018c e7e4     +LDI R30 , LOW ( 2 * _0x0 + ( 10 ) )
00018d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 10 ) )
                 	__POINTW1FN _0x0,10
00018e 940e 01e3 	CALL SUBOPT_0x2
                 ; 0000 0157 
                 ; 0000 0158         PORTA = 254;
000190 efee      	LDI  R30,LOW(254)
000191 bbeb      	OUT  0x1B,R30
                 ; 0000 0159 
                 ; 0000 015A         while (rx_counter == 0)
                 _0x36:
000192 2077      	TST  R7
000193 f3f1      	BREQ _0x36
                 ; 0000 015B         {
                 ; 0000 015C 
                 ; 0000 015D         }
                 ; 0000 015E         PORTA = 253;
000194 efed      	LDI  R30,LOW(253)
000195 bbeb      	OUT  0x1B,R30
                 ; 0000 015F         WaitCommand();
000196 dfd9      	RCALL _WaitCommand
                 ; 0000 0160         if (command == COMMAND_18)
                 ; 0000 0161         {
                 ; 0000 0162         }
                 ; 0000 0163 
                 ; 0000 0164         delay_ms(50);
000197 940e 01e7 	CALL SUBOPT_0x3
                 ; 0000 0165 
                 ; 0000 0166         //return ValidateResponse("1804\r");
                 ; 0000 0167 }
000199 9508      	RET
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 016C {
                 _main:
                 ; 0000 016D     char value = 0;
                 ; 0000 016E 
                 ; 0000 016F     init();
                 ;	value -> R17
00019a e010      	LDI  R17,0
00019b df91      	RCALL _init
                 ; 0000 0170 
                 ; 0000 0171     while (1)
                 _0x3A:
                 ; 0000 0172     {
                 ; 0000 0173         value++;
00019c 5f1f      	SUBI R17,-1
                 ; 0000 0174         PORTB = value;
00019d bb18      	OUT  0x18,R17
                 ; 0000 0175         delay_ms(50);
00019e 940e 01e7 	CALL SUBOPT_0x3
                 ; 0000 0176 
                 ; 0000 0177 
                 ; 0000 0178     }
0001a0 cffb      	RJMP _0x3A
                 ; 0000 0179 
                 ; 0000 017A     FindPartner();
                 ; 0000 017B     while (1)
                 ; 0000 017C     {
                 ; 0000 017D         Handshake();
                 ; 0000 017E         putsf("Ready");
                 ; 0000 017F 
                 ; 0000 0180         while (1)
                 _0x40:
                 ; 0000 0181         {
                 ; 0000 0182             WaitCommand();
0001a1 dfce      	RCALL _WaitCommand
                 ; 0000 0183             if (command == COMMAND_ON)
0001a2 e0e3      	LDI  R30,LOW(3)
0001a3 15e6      	CP   R30,R6
0001a4 f431      	BRNE _0x43
                 ; 0000 0184             {
                 ; 0000 0185                 putsf("1");
                +
0001a5 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
0001a6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
0001a7 940e 01e3 	CALL SUBOPT_0x2
                 ; 0000 0186                 D(255);
0001a9 efef      	LDI  R30,LOW(255)
0001aa c008      	RJMP _0x5B
                 ; 0000 0187             }
                 ; 0000 0188             else if (command == COMMAND_OFF)
                 _0x43:
0001ab e0e4      	LDI  R30,LOW(4)
0001ac 15e6      	CP   R30,R6
0001ad f439      	BRNE _0x45
                 ; 0000 0189             {
                 ; 0000 018A                 putsf("0");
                +
0001ae e8e4     +LDI R30 , LOW ( 2 * _0x0 + ( 26 ) )
0001af e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 26 ) )
                 	__POINTW1FN _0x0,26
0001b0 940e 01e3 	CALL SUBOPT_0x2
                 ; 0000 018B                 D(0);
0001b2 e0e0      	LDI  R30,LOW(0)
                 _0x5B:
0001b3 93ea      	ST   -Y,R30
0001b4 dfa4      	RCALL _D
                 ; 0000 018C             }
                 ; 0000 018D 
                 ; 0000 018E 
                 ; 0000 018F         }
                 _0x45:
0001b5 cfeb      	RJMP _0x40
                 ; 0000 0190 
                 ; 0000 0191 
                 ; 0000 0192     }
                 ; 0000 0193 
                 ; 0000 0194 
                 ; 0000 0195 
                 ; 0000 0196 while (0)
                 ; 0000 0197       {
                 ; 0000 0198 
                 ; 0000 0199       while (0)
                 ; 0000 019A       {
                 ; 0000 019B         delay_ms(50);
                 ; 0000 019C         value++;
                 ; 0000 019D         PORTA = value;
                 ; 0000 019E 
                 ; 0000 019F       }
                 ; 0000 01A0 
                 ; 0000 01A1       while (0)
                 ; 0000 01A2       {
                 ; 0000 01A3         putchar(value);
                 ; 0000 01A4         value++;
                 ; 0000 01A5       }
                 ; 0000 01A6 
                 ; 0000 01A7       // Place your code here
                 ; 0000 01A8       delay_ms(1500);
                 ; 0000 01A9       putchar('+');
                 ; 0000 01AA       putchar('+');
                 ; 0000 01AB       putchar('+');
                 ; 0000 01AC       delay_ms(1000);
                 ; 0000 01AD       value = getchar();
                 ; 0000 01AE 
                 ; 0000 01AF       if (value == 'O')
                 ; 0000 01B0       {
                 ; 0000 01B1            value = getchar();
                 ; 0000 01B2 
                 ; 0000 01B3            putsf("ATCN");
                 ; 0000 01B4            getchar();
                 ; 0000 01B5            getchar();
                 ; 0000 01B6 
                 ; 0000 01B7            putsf("Hello");
                 ; 0000 01B8       while (1)
                 _0x50:
                 ; 0000 01B9       {
                 ; 0000 01BA 
                 ; 0000 01BB            value = getchar();
0001b6 df64      	RCALL _getchar
0001b7 2f1e      	MOV  R17,R30
                 ; 0000 01BC            PORTA = value;
0001b8 bb1b      	OUT  0x1B,R17
                 ; 0000 01BD            putchar(value);
0001b9 931a      	ST   -Y,R17
0001ba d002      	RCALL _putchar
                 ; 0000 01BE 
                 ; 0000 01BF       }
0001bb cffa      	RJMP _0x50
                 ; 0000 01C0 
                 ; 0000 01C1       while (0)
                 ; 0000 01C2       {
                 ; 0000 01C3         delay_ms(50);
                 ; 0000 01C4         value++;
                 ; 0000 01C5         PORTA = value;
                 ; 0000 01C6         putchar(value);
                 ; 0000 01C7 
                 ; 0000 01C8       }
                 ; 0000 01C9 
                 ; 0000 01CA       }
                 ; 0000 01CB 
                 ; 0000 01CC       PORTA=value;
                 ; 0000 01CD 
                 ; 0000 01CE     delay_ms(1000000000);
                 ; 0000 01CF 
                 ; 0000 01D0 
                 ; 0000 01D1 
                 ; 0000 01D2       };
                 _0x48:
                 ; 0000 01D3 }
                 _0x56:
0001bc cfff      	RJMP _0x56
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 putchar0:
0001bd 9b5d           sbis usr,udre
0001be cffe           rjmp putchar0
0001bf 81e8           ld   r30,y
0001c0 b9ec           out  udr,r30
                 _0x2060001:
0001c1 9621      	ADIW R28,1
0001c2 9508      	RET
                 _putsf:
0001c3 931a      	ST   -Y,R17
                 _0x2000006:
0001c4 81e9      	LDD  R30,Y+1
0001c5 81fa      	LDD  R31,Y+1+1
0001c6 9631      	ADIW R30,1
0001c7 83e9      	STD  Y+1,R30
0001c8 83fa      	STD  Y+1+1,R31
0001c9 9731      	SBIW R30,1
0001ca 91e4      	LPM  R30,Z
0001cb 2f1e      	MOV  R17,R30
0001cc 30e0      	CPI  R30,0
0001cd f019      	BREQ _0x2000008
0001ce 931a      	ST   -Y,R17
0001cf dfed      	RCALL _putchar
0001d0 cff3      	RJMP _0x2000006
                 _0x2000008:
0001d1 e0ea      	LDI  R30,LOW(10)
0001d2 93ea      	ST   -Y,R30
0001d3 dfe9      	RCALL _putchar
0001d4 8118      	LDD  R17,Y+0
0001d5 9623      	ADIW R28,3
0001d6 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001d7 eee8      	LDI  R30,LOW(1000)
0001d8 e0f3      	LDI  R31,HIGH(1000)
0001d9 93fa      	ST   -Y,R31
0001da 93ea      	ST   -Y,R30
0001db 940c 01f1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001dd 93fa      	ST   -Y,R31
0001de 93ea      	ST   -Y,R30
0001df 940e 015e 	CALL _SendString
0001e1 940c 0170 	JMP  _WaitCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0001e3 93fa      	ST   -Y,R31
0001e4 93ea      	ST   -Y,R30
0001e5 940c 01c3 	JMP  _putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001e7 e3e2      	LDI  R30,LOW(50)
0001e8 e0f0      	LDI  R31,HIGH(50)
0001e9 93fa      	ST   -Y,R31
0001ea 93ea      	ST   -Y,R30
0001eb 940c 01f1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0001ed e2eb      	LDI  R30,LOW(43)
0001ee 93ea      	ST   -Y,R30
0001ef 940c 01bd 	JMP  _putchar
                 
                 
                 	.CSEG
                 _delay_ms:
0001f1 91e9      	ld   r30,y+
0001f2 91f9      	ld   r31,y+
0001f3 9630      	adiw r30,0
0001f4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001f5 ed80     +LDI R24 , LOW ( 0x7D0 )
0001f6 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001f7 9701     +SBIW R24 , 1
0001f8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001f9 95a8      	wdr
0001fa 9731      	sbiw r30,1
0001fb f7c9      	brne __delay_ms0
                 __delay_ms1:
0001fc 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   3 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   7 r7 :   6 
r8 :  15 r9 :   6 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   5 r17:  19 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   5 r26:  29 r27:   4 r28:   4 r29:   1 r30: 173 r31:  29 
x  :   3 y  :  77 z  :  12 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   6 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  31 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   9 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  13 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   0 cpi   :  21 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   3 jmp   :  29 ld    :  34 ldd   :   6 ldi   :  71 
lds   :   0 lpm   :  13 lsl   :   0 lsr   :   0 mov   :  22 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  49 pop   :   0 push  :   0 rcall :  12 ret   :   8 
reti  :   1 rjmp  :  21 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  39 std   :   3 sts   :   0 sub   :   1 subi  :   3 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 36 out of 116 (31.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003fa    942     76   1018   16384   6.2%
[.dseg] 0x000060 0x000168      0      8      8    1024   0.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
