
AVRASM ver. 2.1.30  D:\AvrProjects\LandscapeWireless\List\Landscape.asm Sun Feb 28 18:29:55 2010

D:\AvrProjects\LandscapeWireless\List\Landscape.asm(955): warning: Register r3 already defined by the .DEF directive
D:\AvrProjects\LandscapeWireless\List\Landscape.asm(956): warning: Register r2 already defined by the .DEF directive
D:\AvrProjects\LandscapeWireless\List\Landscape.asm(957): warning: Register r5 already defined by the .DEF directive
D:\AvrProjects\LandscapeWireless\List\Landscape.asm(958): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.5b Standard
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATtiny2313V
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Tiny
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 32 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313V
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R3
                 	.DEF _rx_rd_index=R2
                 	.DEF _rx_counter=R5
                 	.DEF _state=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 c025      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c12d      	RJMP _timer1_ovf_isr
000006 cff9      	RJMP 0x00
000007 c0bd      	RJMP _usart_rx_isr
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G100:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x4001D:
D:\AvrProjects\LandscapeWireless\List\Landscape.asm(991): warning: .cseg .db misalignment - padding zero byte
00001c 0000      	.DB  0x0
                 _0x60000:
00001d 4745
00001e 0d30
00001f 4500
000020 3147      	.DB  0x45,0x47,0x30,0xD,0x0,0x45,0x47,0x31
000021 000d      	.DB  0xD,0x0
                 
                 __GLOBAL_INI_TBL:
000022 0001      	.DW  0x01
000023 0004      	.DW  0x04
000024 0038      	.DW  _0x4001D*2
                 
                 _0xFFFFFFFF:
000025 0000      	.DW  0
                 
                 __RESET:
000026 94f8      	CLI
000027 27ee      	CLR  R30
000028 bbec      	OUT  EECR,R30
000029 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002a e1f8      	LDI  R31,0x18
00002b b7a4      	IN   R26,MCUSR
00002c 7fa7      	CBR  R26,8
00002d bfa4      	OUT  MCUSR,R26
00002e bdf1      	OUT  WDTCR,R31
00002f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000030 e08d      	LDI  R24,(14-2)+1
000031 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000032 93ed      	ST   X+,R30
000033 958a      	DEC  R24
000034 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000035 e880      	LDI  R24,LOW(0x80)
000036 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000037 93ed      	ST   X+,R30
000038 958a      	DEC  R24
000039 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003a e4e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003c 9185      	LPM  R24,Z+
00003d 9195      	LPM  R25,Z+
00003e 9700      	SBIW R24,0
00003f f061      	BREQ __GLOBAL_INI_END
000040 91a5      	LPM  R26,Z+
000041 91b5      	LPM  R27,Z+
000042 9005      	LPM  R0,Z+
000043 9015      	LPM  R1,Z+
000044 01bf      	MOVW R22,R30
000045 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000046 9005      	LPM  R0,Z+
000047 920d      	ST   X+,R0
000048 9701      	SBIW R24,1
000049 f7e1      	BRNE __GLOBAL_INI_LOOP
00004a 01fb      	MOVW R30,R22
00004b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00004c e0e0      	LDI  R30,0x00
00004d bbe3      	OUT  GPIOR0,R30
00004e bbe4      	OUT  GPIOR1,R30
00004f bbe5      	OUT  GPIOR2,R30
                 
                 ;STACK POINTER INITIALIZATION
000050 edef      	LDI  R30,LOW(0xDF)
000051 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000052 e8c0      	LDI  R28,LOW(0x80)
                 
000053 c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include "project.h"
                 ;
                 ;#if 0
                 ;void D(char v)
                 ;{
                 ;    PORTB = 255 - v;
                 ;}
                 ;#endif
                 ;
                 ;
                 ;void main(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _main:
                 ; 0000 0010     init();
000054 d007      	RCALL _init
                 ; 0000 0011 
                 ; 0000 0012     while (1)
                 _0x3:
                 ; 0000 0013     {
                 ; 0000 0014         delay_ms(1000);
000055 eee8      	LDI  R30,LOW(1000)
000056 e0f3      	LDI  R31,HIGH(1000)
000057 93fa      	ST   -Y,R31
000058 93ea      	ST   -Y,R30
000059 d15c      	RCALL _delay_ms
                 ; 0000 0015     }
00005a cffa      	RJMP _0x3
                 ; 0000 0016 }
                 _0x6:
00005b cfff      	RJMP _0x6
                 ;
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "project.h"
                 ;
                 ;void init(void)
                 ; 0001 0005 {
                 
                 	.CSEG
                 _init:
                 ; 0001 0006 // Crystal Oscillator division factor: 1
                 ; 0001 0007 #pragma optsize-
                 ; 0001 0008 CLKPR=0x80;
00005c e8e0      	LDI  R30,LOW(128)
00005d bde6      	OUT  0x26,R30
                 ; 0001 0009 CLKPR=0x00;
00005e e0e0      	LDI  R30,LOW(0)
00005f bde6      	OUT  0x26,R30
                 ; 0001 000A #ifdef _OPTIMIZE_SIZE_
                 ; 0001 000B #pragma optsize+
                 ; 0001 000C #endif
                 ; 0001 000D 
                 ; 0001 000E // Input/Output Ports initialization
                 ; 0001 000F // Port A initialization
                 ; 0001 0010 // Func2=In Func1=In Func0=Out
                 ; 0001 0011 // State2=T State1=T State0=0
                 ; 0001 0012 PORTA=0x00;
000060 bbeb      	OUT  0x1B,R30
                 ; 0001 0013 DDRA=0x01;
000061 e0e1      	LDI  R30,LOW(1)
000062 bbea      	OUT  0x1A,R30
                 ; 0001 0014 
                 ; 0001 0015 // Port B initialization
                 ; 0001 0016 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=In
                 ; 0001 0017 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=P
                 ; 0001 0018 PORTB=0x01;
000063 bbe8      	OUT  0x18,R30
                 ; 0001 0019 DDRB=0xFE;
000064 efee      	LDI  R30,LOW(254)
000065 bbe7      	OUT  0x17,R30
                 ; 0001 001A 
                 ; 0001 001B // Port D initialization
                 ; 0001 001C // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 001D // State6=P State5=P State4=P State3=P State2=P State1=T State0=T
                 ; 0001 001E PORTD=0x7C;
000066 e7ec      	LDI  R30,LOW(124)
000067 bbe2      	OUT  0x12,R30
                 ; 0001 001F DDRD=0x00;
000068 e0e0      	LDI  R30,LOW(0)
000069 bbe1      	OUT  0x11,R30
                 ; 0001 0020 
                 ; 0001 0021 // Timer/Counter 0 initialization
                 ; 0001 0022 // Clock source: System Clock
                 ; 0001 0023 // Clock value: Timer 0 Stopped
                 ; 0001 0024 // Mode: Normal top=FFh
                 ; 0001 0025 // OC0A output: Disconnected
                 ; 0001 0026 // OC0B output: Disconnected
                 ; 0001 0027 TCCR0A=0x00;
00006a bfe0      	OUT  0x30,R30
                 ; 0001 0028 TCCR0B=0x00;
00006b bfe3      	OUT  0x33,R30
                 ; 0001 0029 TCNT0=0x00;
00006c bfe2      	OUT  0x32,R30
                 ; 0001 002A OCR0A=0x00;
00006d bfe6      	OUT  0x36,R30
                 ; 0001 002B OCR0B=0x00;
00006e bfec      	OUT  0x3C,R30
                 ; 0001 002C 
                 ; 0001 002D // Timer/Counter 1 initialization
                 ; 0001 002E // Clock source: System Clock
                 ; 0001 002F // Clock value: 31.250 kHz
                 ; 0001 0030 // Mode: Normal top=FFFFh
                 ; 0001 0031 // OC1A output: Discon.
                 ; 0001 0032 // OC1B output: Discon.
                 ; 0001 0033 // Noise Canceler: Off
                 ; 0001 0034 // Input Capture on Falling Edge
                 ; 0001 0035 // Timer1 Overflow Interrupt: On
                 ; 0001 0036 // Input Capture Interrupt: Off
                 ; 0001 0037 // Compare A Match Interrupt: Off
                 ; 0001 0038 // Compare B Match Interrupt: Off
                 ; 0001 0039 TCCR1A=0x00;
00006f bdef      	OUT  0x2F,R30
                 ; 0001 003A TCCR1B=0x03;
000070 e0e3      	LDI  R30,LOW(3)
000071 bdee      	OUT  0x2E,R30
                 ; 0001 003B TCNT1H=TCNT1H_VALUE;
000072 d112      	RCALL SUBOPT_0x0
                 ; 0001 003C TCNT1L=TCNT1L_VALUE;
                 ; 0001 003D ICR1H=0x00;
000073 e0e0      	LDI  R30,LOW(0)
000074 bde5      	OUT  0x25,R30
                 ; 0001 003E ICR1L=0x00;
000075 bde4      	OUT  0x24,R30
                 ; 0001 003F OCR1AH=0x00;
000076 bdeb      	OUT  0x2B,R30
                 ; 0001 0040 OCR1AL=0x00;
000077 bdea      	OUT  0x2A,R30
                 ; 0001 0041 OCR1BH=0x00;
000078 bde9      	OUT  0x29,R30
                 ; 0001 0042 OCR1BL=0x00;
000079 bde8      	OUT  0x28,R30
                 ; 0001 0043 
                 ; 0001 0044 // External Interrupt(s) initialization
                 ; 0001 0045 // INT0: Off
                 ; 0001 0046 // INT1: Off
                 ; 0001 0047 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0048 GIMSK=0x00;
00007a bfeb      	OUT  0x3B,R30
                 ; 0001 0049 MCUCR=0x00;
00007b bfe5      	OUT  0x35,R30
                 ; 0001 004A 
                 ; 0001 004B // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 004C TIMSK=0x80;
00007c e8e0      	LDI  R30,LOW(128)
00007d bfe9      	OUT  0x39,R30
                 ; 0001 004D 
                 ; 0001 004E // Universal Serial Interface initialization
                 ; 0001 004F // Mode: Disabled
                 ; 0001 0050 // Clock source: Register & Counter=no clk.
                 ; 0001 0051 // USI Counter Overflow Interrupt: Off
                 ; 0001 0052 USICR=0x00;
00007e e0e0      	LDI  R30,LOW(0)
00007f b9ed      	OUT  0xD,R30
                 ; 0001 0053 
                 ; 0001 0054 // USART initialization
                 ; 0001 0055 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 0056 // USART Receiver: On
                 ; 0001 0057 // USART Transmitter: On
                 ; 0001 0058 // USART Mode: Asynchronous
                 ; 0001 0059 // USART Baud Rate: 9600
                 ; 0001 005A UCSRA=0x00;
000080 b9eb      	OUT  0xB,R30
                 ; 0001 005B UCSRB=0x98;
000081 e9e8      	LDI  R30,LOW(152)
000082 b9ea      	OUT  0xA,R30
                 ; 0001 005C UCSRC=0x06;
000083 e0e6      	LDI  R30,LOW(6)
000084 b9e3      	OUT  0x3,R30
                 ; 0001 005D UBRRH=0x00;
000085 e0e0      	LDI  R30,LOW(0)
000086 b9e2      	OUT  0x2,R30
                 ; 0001 005E UBRRL=0x33;
000087 e3e3      	LDI  R30,LOW(51)
000088 b9e9      	OUT  0x9,R30
                 ; 0001 005F 
                 ; 0001 0060 // Analog Comparator initialization
                 ; 0001 0061 // Analog Comparator: Off
                 ; 0001 0062 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0063 ACSR=0x80;
000089 e8e0      	LDI  R30,LOW(128)
00008a b9e8      	OUT  0x8,R30
                 ; 0001 0064 
                 ; 0001 0065 // Global enable interrupts
                 ; 0001 0066 #asm("sei")
00008b 9478      	sei
                 ; 0001 0067 }
00008c 9508      	RET
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include "project.h"
                 ;
                 ;//#define RXB8 1
                 ;//#define TXB8 0
                 ;//#define UPE 2
                 ;#define OVR 3
                 ;//#define FE 4
                 ;//#define UDRE 5
                 ;//#define RXC 7
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<OVR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;
                 ;char command;
                 ;char command_ready = 0;
                 ;
                 ;
                 ;char state = 0;
                 ;
                 ;void HandleChar(char c)
                 ; 0002 0026 {
                 
                 	.CSEG
                 _HandleChar:
                 ; 0002 0027     switch (state)
                 ;	c -> Y+0
00008d 2de4      	MOV  R30,R4
00008e e0f0      	LDI  R31,0
                 ; 0002 0028     {
                 ; 0002 0029         case 0: // ready;
00008f 9730      	SBIW R30,0
000090 f459      	BRNE _0x40006
                 ; 0002 002A             if (c == 'O') state = 1;
000091 81a8      	LD   R26,Y
000092 34af      	CPI  R26,LOW(0x4F)
000093 f411      	BRNE _0x40007
000094 e0e1      	LDI  R30,LOW(1)
000095 2e4e      	MOV  R4,R30
                 ; 0002 002B             if (c == 'S') state = 5;
                 _0x40007:
000096 81a8      	LD   R26,Y
000097 35a3      	CPI  R26,LOW(0x53)
000098 f411      	BRNE _0x40008
000099 e0e5      	LDI  R30,LOW(5)
00009a 2e4e      	MOV  R4,R30
                 ; 0002 002C             break;
                 _0x40008:
00009b c028      	RJMP _0x40005
                 ; 0002 002D 
                 ; 0002 002E         case 1: // "O"
                 _0x40006:
00009c 30e1      	CPI  R30,LOW(0x1)
00009d e0a0      	LDI  R26,HIGH(0x1)
00009e 07fa      	CPC  R31,R26
00009f f441      	BRNE _0x40009
                 ; 0002 002F             if (c == 'K') state = 2;
0000a0 81a8      	LD   R26,Y
0000a1 34ab      	CPI  R26,LOW(0x4B)
0000a2 f419      	BRNE _0x4000A
0000a3 e0e2      	LDI  R30,LOW(2)
0000a4 2e4e      	MOV  R4,R30
                 ; 0002 0030             else state = 0;
0000a5 c001      	RJMP _0x4000B
                 _0x4000A:
0000a6 2444      	CLR  R4
                 ; 0002 0031             break;
                 _0x4000B:
0000a7 c01c      	RJMP _0x40005
                 ; 0002 0032 
                 ; 0002 0033         case 2: // "OK"
                 _0x40009:
0000a8 30e2      	CPI  R30,LOW(0x2)
0000a9 e0a0      	LDI  R26,HIGH(0x2)
0000aa 07fa      	CPC  R31,R26
0000ab f451      	BRNE _0x4000C
                 ; 0002 0034             if (c == '\r')
0000ac 81a8      	LD   R26,Y
0000ad 30ad      	CPI  R26,LOW(0xD)
0000ae f429      	BRNE _0x4000D
                 ; 0002 0035             {
                 ; 0002 0036                 command = COMMAND_OK;
0000af e0e1      	LDI  R30,LOW(1)
0000b0 93e0 0080 	STS  _command,R30
                 ; 0002 0037                 command_ready = 1;
0000b2 93e0 0081 	STS  _command_ready,R30
                 ; 0002 0038                 state = 0;
                 ; 0002 0039             }
                 ; 0002 003A             else state = 0;
                 _0x4000D:
                 _0x4001C:
0000b4 2444      	CLR  R4
                 ; 0002 003B             break;
0000b5 c00e      	RJMP _0x40005
                 ; 0002 003C 
                 ; 0002 003D         case 5: // 'S'
                 _0x4000C:
0000b6 30e5      	CPI  R30,LOW(0x5)
0000b7 e0a0      	LDI  R26,HIGH(0x5)
0000b8 07fa      	CPC  R31,R26
0000b9 f451      	BRNE _0x40005
                 ; 0002 003E             if (c == '1')
0000ba 81a8      	LD   R26,Y
0000bb 33a1      	CPI  R26,LOW(0x31)
0000bc f411      	BRNE _0x40010
                 ; 0002 003F             {
                 ; 0002 0040                 AllOn();
0000bd d038      	RCALL _AllOn
                 ; 0002 0041             }
                 ; 0002 0042             else if (c == '0')
0000be c004      	RJMP _0x40011
                 _0x40010:
0000bf 81a8      	LD   R26,Y
0000c0 33a0      	CPI  R26,LOW(0x30)
0000c1 f409      	BRNE _0x40012
                 ; 0002 0043             {
                 ; 0002 0044                 AllOff();
0000c2 d029      	RCALL _AllOff
                 ; 0002 0045             }
                 ; 0002 0046             state = 0;
                 _0x40012:
                 _0x40011:
0000c3 2444      	CLR  R4
                 ; 0002 0047             break;
                 ; 0002 0048     }
                 _0x40005:
                 ; 0002 0049 }
0000c4 c0be      	RJMP _0x2060001
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0002 0050 {
                 _usart_rx_isr:
0000c5 d0c4      	RCALL SUBOPT_0x1
                 ; 0002 0051 char status,data;
                 ; 0002 0052 status=UCSRA;
0000c6 d150      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
0000c7 b11b      	IN   R17,11
                 ; 0002 0053 data=UDR;
0000c8 b10c      	IN   R16,12
                 ; 0002 0054    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000c9 2fe1      	MOV  R30,R17
0000ca 71ec      	ANDI R30,LOW(0x1C)
0000cb f481      	BRNE _0x40013
                 ; 0002 0055    {
                 ; 0002 0056    rx_buffer[rx_wr_index]=data;
0000cc 2de3      	MOV  R30,R3
0000cd 57ee      	SUBI R30,-LOW(_rx_buffer)
0000ce 8300      	ST   Z,R16
                 ; 0002 0057    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000cf 9433      	INC  R3
0000d0 e0e8      	LDI  R30,LOW(8)
0000d1 15e3      	CP   R30,R3
0000d2 f409      	BRNE _0x40014
0000d3 2433      	CLR  R3
                 ; 0002 0058    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x40014:
0000d4 9453      	INC  R5
0000d5 e0e8      	LDI  R30,LOW(8)
0000d6 15e5      	CP   R30,R5
0000d7 f411      	BRNE _0x40015
                 ; 0002 0059       {
                 ; 0002 005A       rx_counter=0;
0000d8 2455      	CLR  R5
                 ; 0002 005B       rx_buffer_overflow=1;
0000d9 9a98      	SBI  0x13,0
                 ; 0002 005C       };
                 _0x40015:
                 ; 0002 005D 
                 ; 0002 005E       HandleChar(data);
0000da 930a      	ST   -Y,R16
0000db dfb1      	RCALL _HandleChar
                 ; 0002 005F 
                 ; 0002 0060    };
                 _0x40013:
                 ; 0002 0061 }
0000dc d13d      	RCALL __LOADLOCR2P
0000dd d0ba      	RCALL SUBOPT_0x2
0000de 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0002 0068 {
                 ; 0002 0069 char data;
                 ; 0002 006A while (rx_counter==0);
                 ;	data -> R17
                 ; 0002 006B data=rx_buffer[rx_rd_index];
                 ; 0002 006C if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0002 006D #asm("cli")
                 ; 0002 006E --rx_counter;
                 ; 0002 006F #asm("sei")
                 ; 0002 0070 return data;
                 ; 0002 0071 }
                 ;#pragma used-
                 ;#endif
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include "project.h"
                 ;
                 ;// Tick time is 1/10th of a second (100 mSec).
                 ;// Two hour timeout
                 ;
                 ;//#define TIMEOUT_IN_TICKS (10*34)
                 ;#define TIMEOUT_IN_TICKS (10 * 60 * 60 * 2)
                 ;
                 ;static long int timeRemainingTicks = 0;   // time before lights go off
                 ;static char outputState = 0;
                 ;static char outputStateLast = 0;
                 ;static char ticks = 0;
                 ;
                 ;#define ALLOFF PIND.2
                 ;#define ALLON PIND.3
                 ;#define ON1 PIND.4
                 ;#define ON2 PIND.5
                 ;#define ON3 PIND.6
                 ;#define STATUS PORTB.7
                 ;
                 ;void TurnOn(void)
                 ; 0003 0019 {
                 
                 	.CSEG
                 _TurnOn:
                 ; 0003 001A     timeRemainingTicks = TIMEOUT_IN_TICKS;
                +
0000df e4e0     +LDI R30 , LOW ( 0x11940 )
0000e0 e1f9     +LDI R31 , HIGH ( 0x11940 )
0000e1 e061     +LDI R22 , BYTE3 ( 0x11940 )
0000e2 e070     +LDI R23 , BYTE4 ( 0x11940 )
                 	__GETD1N 0x11940
0000e3 93e0 008a 	STS  _timeRemainingTicks_G003,R30
0000e5 93f0 008b 	STS  _timeRemainingTicks_G003+1,R31
0000e7 9360 008c 	STS  _timeRemainingTicks_G003+2,R22
0000e9 9370 008d 	STS  _timeRemainingTicks_G003+3,R23
                 ; 0003 001B }
0000eb 9508      	RET
                 ;
                 ;void AllOff(void)
                 ; 0003 001E {
                 _AllOff:
                 ; 0003 001F     outputState = 0;
0000ec d0b9      	RCALL SUBOPT_0x3
                 ; 0003 0020     timeRemainingTicks = 0;
0000ed 93e0 008a 	STS  _timeRemainingTicks_G003,R30
0000ef 93e0 008b 	STS  _timeRemainingTicks_G003+1,R30
0000f1 93e0 008c 	STS  _timeRemainingTicks_G003+2,R30
0000f3 93e0 008d 	STS  _timeRemainingTicks_G003+3,R30
                 ; 0003 0021 }
0000f5 9508      	RET
                 ;
                 ;void AllOn(void)
                 ; 0003 0024 {
                 _AllOn:
                 ; 0003 0025     outputState = 30;
0000f6 e1ee      	LDI  R30,LOW(30)
0000f7 93e0 008e 	STS  _outputState_G003,R30
                 ; 0003 0026     TurnOn();
0000f9 dfe5      	RCALL _TurnOn
                 ; 0003 0027 }
0000fa 9508      	RET
                 ;
                 ;
                 ;void HandleButtons()
                 ; 0003 002B {
                 _HandleButtons:
                 ; 0003 002C     if (ALLOFF == 0)
0000fb 9982      	SBIC 0x10,2
0000fc c002      	RJMP _0x60003
                 ; 0003 002D     {
                 ; 0003 002E         AllOff();
0000fd dfee      	RCALL _AllOff
                 ; 0003 002F     }
                 ; 0003 0030     else if (ALLON == 0)
0000fe c015      	RJMP _0x60004
                 _0x60003:
0000ff 9983      	SBIC 0x10,3
000100 c002      	RJMP _0x60005
                 ; 0003 0031     {
                 ; 0003 0032         AllOn();
000101 dff4      	RCALL _AllOn
                 ; 0003 0033     }
                 ; 0003 0034     else if (ON1 == 0)
000102 c011      	RJMP _0x60006
                 _0x60005:
000103 9984      	SBIC 0x10,4
000104 c003      	RJMP _0x60007
                 ; 0003 0035     {
                 ; 0003 0036         outputState |= 1 << 1;
000105 d0a4      	RCALL SUBOPT_0x4
000106 60e2      	ORI  R30,2
000107 c009      	RJMP _0x60023
                 ; 0003 0037         TurnOn();
                 ; 0003 0038     }
                 ; 0003 0039     else if (ON2 == 0)
                 _0x60007:
000108 9985      	SBIC 0x10,5
000109 c003      	RJMP _0x60009
                 ; 0003 003A     {
                 ; 0003 003B         outputState |= 1 << 2;
00010a d09f      	RCALL SUBOPT_0x4
00010b 60e4      	ORI  R30,4
00010c c004      	RJMP _0x60023
                 ; 0003 003C         TurnOn();
                 ; 0003 003D     }
                 ; 0003 003E     else if (ON3 == 0)
                 _0x60009:
00010d 9986      	SBIC 0x10,6
00010e c005      	RJMP _0x6000B
                 ; 0003 003F     {
                 ; 0003 0040         outputState |= 1 << 3;
00010f d09a      	RCALL SUBOPT_0x4
000110 60e8      	ORI  R30,8
                 _0x60023:
000111 93e0 008e 	STS  _outputState_G003,R30
                 ; 0003 0041         TurnOn();
000113 dfcb      	RCALL _TurnOn
                 ; 0003 0042     }
                 ; 0003 0043 }
                 _0x6000B:
                 _0x60006:
                 _0x60004:
000114 9508      	RET
                 ;
                 ;void SendString(char flash *string)
                 ; 0003 0046 {
                 _SendString:
                 ; 0003 0047     while (*string != 0)
                 ;	*string -> Y+0
                 _0x6000C:
000115 81e8      	LD   R30,Y
000116 81f9      	LDD  R31,Y+1
000117 91e4      	LPM  R30,Z
000118 30e0      	CPI  R30,0
000119 f059      	BREQ _0x6000E
                 ; 0003 0048     {
                 ; 0003 0049         putchar(*string);
00011a 81e8      	LD   R30,Y
00011b 81f9      	LDD  R31,Y+1
00011c 91e4      	LPM  R30,Z
00011d 93ea      	ST   -Y,R30
00011e d060      	RCALL _putchar
                 ; 0003 004A         string++;
00011f 81e8      	LD   R30,Y
000120 81f9      	LDD  R31,Y+1
000121 9631      	ADIW R30,1
000122 83e8      	ST   Y,R30
000123 83f9      	STD  Y+1,R31
                 ; 0003 004B     }
000124 cff0      	RJMP _0x6000C
                 _0x6000E:
                 ; 0003 004C }
000125 9622      	ADIW R28,2
000126 9508      	RET
                 ;
                 ;void SendOutputState()
                 ; 0003 004F {
                 _SendOutputState:
                 ; 0003 0050     if (outputState == 0)
000127 d082      	RCALL SUBOPT_0x4
000128 30e0      	CPI  R30,0
000129 f419      	BRNE _0x6000F
                 ; 0003 0051     {
                 ; 0003 0052         SendString("EG0\r");
                +
00012a e3ea     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
00012b e0f0     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
00012c c002      	RJMP _0x60024
                 ; 0003 0053     }
                 ; 0003 0054     else
                 _0x6000F:
                 ; 0003 0055     {
                 ; 0003 0056         SendString("EG1\r");
                +
00012d e3ef     +LDI R30 , LOW ( 2 * _0x60000 + ( 5 ) )
00012e e0f0     +LDI R31 , HIGH ( 2 * _0x60000 + ( 5 ) )
                 	__POINTW1FN _0x60000,5
                 _0x60024:
00012f 93fa      	ST   -Y,R31
000130 93ea      	ST   -Y,R30
000131 dfe3      	RCALL _SendString
                 ; 0003 0057     }
                 ; 0003 0058 }
000132 9508      	RET
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0003 005C {
                 _timer1_ovf_isr:
000133 d056      	RCALL SUBOPT_0x1
                 ; 0003 005D         // Reinitialize Timer1 value
                 ; 0003 005E     TCNT1H=TCNT1H_VALUE;
000134 d050      	RCALL SUBOPT_0x0
                 ; 0003 005F     TCNT1L=TCNT1L_VALUE;
                 ; 0003 0060 
                 ; 0003 0061     HandleButtons();
000135 dfc5      	RCALL _HandleButtons
                 ; 0003 0062 
                 ; 0003 0063     if (timeRemainingTicks > 0)
000136 d076      	RCALL SUBOPT_0x5
000137 d0d9      	RCALL __CPD02
000138 f4ec      	BRGE _0x60011
                 ; 0003 0064     {
                 ; 0003 0065         if ((timeRemainingTicks % 600 == 0) &&
                 ; 0003 0066             (timeRemainingTicks <= 3000))
000139 d073      	RCALL SUBOPT_0x5
                +
00013a e5e8     +LDI R30 , LOW ( 0x258 )
00013b e0f2     +LDI R31 , HIGH ( 0x258 )
00013c e060     +LDI R22 , BYTE3 ( 0x258 )
00013d e070     +LDI R23 , BYTE4 ( 0x258 )
                 	__GETD1N 0x258
00013e d0b0      	RCALL __MODD21
00013f d0cd      	RCALL __CPD10
000140 f449      	BRNE _0x60013
000141 d06b      	RCALL SUBOPT_0x5
                +
000142 3ba9     +CPI R26 , LOW ( 0xBB9 )
000143 e0eb     +LDI R30 , HIGH ( 0xBB9 )
000144 07be     +CPC R27 , R30
000145 e0e0     +LDI R30 , BYTE3 ( 0xBB9 )
000146 078e     +CPC R24 , R30
000147 e0e0     +LDI R30 , BYTE4 ( 0xBB9 )
000148 079e     +CPC R25 , R30
                 	__CPD2N 0xBB9
000149 f00c      	BRLT _0x60014
                 _0x60013:
00014a c002      	RJMP _0x60012
                 _0x60014:
                 ; 0003 0067         {
                 ; 0003 0068             PORTB = 0;
00014b e0e0      	LDI  R30,LOW(0)
00014c c001      	RJMP _0x60025
                 ; 0003 0069         }
                 ; 0003 006A         else
                 _0x60012:
                 ; 0003 006B         {
                 ; 0003 006C             PORTB = outputState;
00014d d05c      	RCALL SUBOPT_0x4
                 _0x60025:
00014e bbe8      	OUT  0x18,R30
                 ; 0003 006D         }
                 ; 0003 006E         timeRemainingTicks--;
00014f e8aa      	LDI  R26,LOW(_timeRemainingTicks_G003)
000150 d0b2      	RCALL __GETD1P_INC
000151 9731      	SBIW R30,1
000152 4060      	SBCI R22,0
000153 4070      	SBCI R23,0
000154 d0b3      	RCALL __PUTDP1_DEC
                 ; 0003 006F     }
                 ; 0003 0070     else
000155 c002      	RJMP _0x60016
                 _0x60011:
                 ; 0003 0071     {
                 ; 0003 0072         outputState = 0;
000156 d04f      	RCALL SUBOPT_0x3
                 ; 0003 0073         PORTB = 0;
000157 bbe8      	OUT  0x18,R30
                 ; 0003 0074     }
                 _0x60016:
                 ; 0003 0075 
                 ; 0003 0076     ticks++;
000158 91e0 0090 	LDS  R30,_ticks_G003
00015a 5fef      	SUBI R30,-LOW(1)
00015b 93e0 0090 	STS  _ticks_G003,R30
                 ; 0003 0077     if (outputState != outputStateLast || ticks == 10)
00015d 91e0 008f 	LDS  R30,_outputStateLast_G003
00015f 91a0 008e 	LDS  R26,_outputState_G003
000161 17ea      	CP   R30,R26
000162 f421      	BRNE _0x60018
000163 91a0 0090 	LDS  R26,_ticks_G003
000165 30aa      	CPI  R26,LOW(0xA)
000166 f421      	BRNE _0x60017
                 _0x60018:
                 ; 0003 0078     {
                 ; 0003 0079         SendOutputState();
000167 dfbf      	RCALL _SendOutputState
                 ; 0003 007A         outputStateLast = outputState;
000168 d041      	RCALL SUBOPT_0x4
000169 93e0 008f 	STS  _outputStateLast_G003,R30
                 ; 0003 007B     }
                 ; 0003 007C 
                 ; 0003 007D     if (ticks == 10)
                 _0x60017:
00016b 91a0 0090 	LDS  R26,_ticks_G003
00016d 30aa      	CPI  R26,LOW(0xA)
00016e f469      	BRNE _0x6001A
                 ; 0003 007E     {
                 ; 0003 007F         ticks = 0;
00016f e0e0      	LDI  R30,LOW(0)
000170 93e0 0090 	STS  _ticks_G003,R30
                 ; 0003 0080         if (outputState != 0 && timeRemainingTicks > 0)
000172 91a0 008e 	LDS  R26,_outputState_G003
000174 30a0      	CPI  R26,LOW(0x0)
000175 f019      	BREQ _0x6001C
000176 d036      	RCALL SUBOPT_0x5
000177 d099      	RCALL __CPD02
000178 f00c      	BRLT _0x6001D
                 _0x6001C:
000179 c001      	RJMP _0x6001B
                 _0x6001D:
                 ; 0003 0081         {
                 ; 0003 0082             STATUS = 1;
00017a 9ac7      	SBI  0x18,7
                 ; 0003 0083         }
                 ; 0003 0084     }
                 _0x6001B:
                 ; 0003 0085     else
00017b c001      	RJMP _0x60020
                 _0x6001A:
                 ; 0003 0086     {
                 ; 0003 0087         STATUS = 0;
00017c 98c7      	CBI  0x18,7
                 ; 0003 0088     }
                 _0x60020:
                 ; 0003 0089 }
00017d d01a      	RCALL SUBOPT_0x2
00017e 9518      	RETI
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 putchar0:
00017f 9b5d           sbis usr,udre
000180 cffe           rjmp putchar0
000181 81e8           ld   r30,y
000182 b9ec           out  udr,r30
                 _0x2060001:
000183 9621      	ADIW R28,1
000184 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _command:
000080           	.BYTE 0x1
                 _command_ready:
000081           	.BYTE 0x1
                 _rx_buffer:
000082           	.BYTE 0x8
                 _timeRemainingTicks_G003:
00008a           	.BYTE 0x4
                 _outputState_G003:
00008e           	.BYTE 0x1
                 _outputStateLast_G003:
00008f           	.BYTE 0x1
                 _ticks_G003:
000090           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000185 ecef      	LDI  R30,LOW(207)
000186 bded      	OUT  0x2D,R30
000187 e2eb      	LDI  R30,LOW(43)
000188 bdec      	OUT  0x2C,R30
000189 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
00018a 920a      	ST   -Y,R0
00018b 921a      	ST   -Y,R1
00018c 92fa      	ST   -Y,R15
00018d 936a      	ST   -Y,R22
00018e 937a      	ST   -Y,R23
00018f 938a      	ST   -Y,R24
000190 939a      	ST   -Y,R25
000191 93aa      	ST   -Y,R26
000192 93ba      	ST   -Y,R27
000193 93ea      	ST   -Y,R30
000194 93fa      	ST   -Y,R31
000195 b7ef      	IN   R30,SREG
000196 93ea      	ST   -Y,R30
000197 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2:
000198 91e9      	LD   R30,Y+
000199 bfef      	OUT  SREG,R30
00019a 91f9      	LD   R31,Y+
00019b 91e9      	LD   R30,Y+
00019c 91b9      	LD   R27,Y+
00019d 91a9      	LD   R26,Y+
00019e 9199      	LD   R25,Y+
00019f 9189      	LD   R24,Y+
0001a0 9179      	LD   R23,Y+
0001a1 9169      	LD   R22,Y+
0001a2 90f9      	LD   R15,Y+
0001a3 9019      	LD   R1,Y+
0001a4 9009      	LD   R0,Y+
0001a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001a6 e0e0      	LDI  R30,LOW(0)
0001a7 93e0 008e 	STS  _outputState_G003,R30
0001a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0001aa 91e0 008e 	LDS  R30,_outputState_G003
0001ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x5:
0001ad 91a0 008a 	LDS  R26,_timeRemainingTicks_G003
0001af 91b0 008b 	LDS  R27,_timeRemainingTicks_G003+1
0001b1 9180 008c 	LDS  R24,_timeRemainingTicks_G003+2
0001b3 9190 008d 	LDS  R25,_timeRemainingTicks_G003+3
0001b5 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001b6 91e9      	ld   r30,y+
0001b7 91f9      	ld   r31,y+
0001b8 9630      	adiw r30,0
0001b9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ba ed80     +LDI R24 , LOW ( 0x7D0 )
0001bb e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001bc 9701     +SBIW R24 , 1
0001bd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001be 95a8      	wdr
0001bf 9731      	sbiw r30,1
0001c0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001c1 9508      	ret
                 
                 __ANEGD1:
0001c2 95f0      	COM  R31
0001c3 9560      	COM  R22
0001c4 9570      	COM  R23
0001c5 95e1      	NEG  R30
0001c6 4fff      	SBCI R31,-1
0001c7 4f6f      	SBCI R22,-1
0001c8 4f7f      	SBCI R23,-1
0001c9 9508      	RET
                 
                 __DIVD21U:
0001ca 933f      	PUSH R19
0001cb 934f      	PUSH R20
0001cc 935f      	PUSH R21
0001cd 2400      	CLR  R0
0001ce 2411      	CLR  R1
0001cf 2744      	CLR  R20
0001d0 2755      	CLR  R21
0001d1 e230      	LDI  R19,32
                 __DIVD21U1:
0001d2 0faa      	LSL  R26
0001d3 1fbb      	ROL  R27
0001d4 1f88      	ROL  R24
0001d5 1f99      	ROL  R25
0001d6 1c00      	ROL  R0
0001d7 1c11      	ROL  R1
0001d8 1f44      	ROL  R20
0001d9 1f55      	ROL  R21
0001da 1a0e      	SUB  R0,R30
0001db 0a1f      	SBC  R1,R31
0001dc 0b46      	SBC  R20,R22
0001dd 0b57      	SBC  R21,R23
0001de f428      	BRCC __DIVD21U2
0001df 0e0e      	ADD  R0,R30
0001e0 1e1f      	ADC  R1,R31
0001e1 1f46      	ADC  R20,R22
0001e2 1f57      	ADC  R21,R23
0001e3 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0001e4 60a1      	SBR  R26,1
                 __DIVD21U3:
0001e5 953a      	DEC  R19
0001e6 f759      	BRNE __DIVD21U1
0001e7 01fd      	MOVW R30,R26
0001e8 01bc      	MOVW R22,R24
0001e9 01d0      	MOVW R26,R0
0001ea 01ca      	MOVW R24,R20
0001eb 915f      	POP  R21
0001ec 914f      	POP  R20
0001ed 913f      	POP  R19
0001ee 9508      	RET
                 
                 __MODD21:
0001ef 94e8      	CLT
0001f0 ff97      	SBRS R25,7
0001f1 c009      	RJMP __MODD211
0001f2 95a0      	COM  R26
0001f3 95b0      	COM  R27
0001f4 9580      	COM  R24
0001f5 9590      	COM  R25
0001f6 5faf      	SUBI R26,-1
0001f7 4fbf      	SBCI R27,-1
0001f8 4f8f      	SBCI R24,-1
0001f9 4f9f      	SBCI R25,-1
0001fa 9468      	SET
                 __MODD211:
0001fb fd77      	SBRC R23,7
0001fc dfc5      	RCALL __ANEGD1
0001fd dfcc      	RCALL __DIVD21U
0001fe 01fd      	MOVW R30,R26
0001ff 01bc      	MOVW R22,R24
000200 f40e      	BRTC __MODD212
000201 dfc0      	RCALL __ANEGD1
                 __MODD212:
000202 9508      	RET
                 
                 __GETD1P_INC:
000203 91ed      	LD   R30,X+
000204 91fd      	LD   R31,X+
000205 916d      	LD   R22,X+
000206 917d      	LD   R23,X+
000207 9508      	RET
                 
                 __PUTDP1_DEC:
000208 937e      	ST   -X,R23
000209 936e      	ST   -X,R22
00020a 93fe      	ST   -X,R31
00020b 93ee      	ST   -X,R30
00020c 9508      	RET
                 
                 __CPD10:
00020d 9730      	SBIW R30,0
00020e 4060      	SBCI R22,0
00020f 4070      	SBCI R23,0
000210 9508      	RET
                 
                 __CPD02:
000211 2400      	CLR  R0
000212 160a      	CP   R0,R26
000213 060b      	CPC  R0,R27
000214 0608      	CPC  R0,R24
000215 0609      	CPC  R0,R25
000216 9508      	RET
                 
                 __SAVELOCR2:
000217 931a      	ST   -Y,R17
000218 930a      	ST   -Y,R16
000219 9508      	RET
                 
                 __LOADLOCR2P:
00021a 9109      	LD   R16,Y+
00021b 9119      	LD   R17,Y+
00021c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313V register use summary:
r0 :  16 r1 :   7 r2 :   0 r3 :   4 r4 :   7 r5 :   3 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   5 r17:   4 r18:   0 r19:   4 r20:   7 r21:   6 r22:  17 r23:  14 
r24:  20 r25:  11 r26:  45 r27:   9 r28:   3 r29:   0 r30: 156 r31:  28 
x  :  11 y  :  51 z  :  10 
Registers used: 23 out of 35 (65.7%)

ATtiny2313V instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   1 
adiw  :   4 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   2 brmi  :   0 brne  :  24 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   1 
cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  11 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   7 cp    :   4 
cpc   :   9 cpi   :  15 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   2 ld    :  30 ldd   :   3 ldi   :  62 lds   :  11 lpm   :  11 
lsl   :   1 lsr   :   0 mov   :   6 movw  :   9 mul   :   0 muls  :   0 
mulsu :   0 neg   :   1 nop   :   0 or    :   0 ori   :   3 out   :  46 
pop   :   3 push  :   3 rcall :  42 ret   :  24 reti  :   2 rjmp  :  48 
rol   :   7 ror   :   0 sbc   :   3 sbci  :  10 sbi   :   2 sbic  :   5 
sbis  :   1 sbiw  :   7 sbr   :   1 sbrc  :   1 sbrs  :   1 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  29 std   :   1 
sts   :  16 sub   :   1 subi  :   3 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 57 out of 114 (50.0%)

ATtiny2313V memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00043a   1044     38   1082    2048  52.8%
[.dseg] 0x000060 0x000091      0     17     17     128  13.3%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 5 warnings
